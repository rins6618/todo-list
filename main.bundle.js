(()=>{"use strict";var __webpack_modules__={71:(module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `#info-box {\n\n    pointer-events: none;\n    padding: 0;\n    display: none;\n    position: fixed;\n    width: 100%;\n    height: 100%;\n    z-index: 9;\n    border: none;\n}\n\n#info-box[open] {\n    background: none;\n    display: block;\n}\n\n#info-box[open] > .info-bg {\n    pointer-events: none;\n    z-index: 10;\n    position: fixed;\n    animation: fadeBg .2s forwards;\n    width: 100%;\n    height: 100%;\n    background: black;\n\n}\n\n#info-box[open] > #info-body {\n    pointer-events: all;\n    padding: 3rem;\n    z-index: 11;\n    position: fixed;\n    background: #fff;\n    width: 60%;\n    height: 80%;\n    animation: fadeBody .2s forwards;\n    left: 20%;\n    border-radius: 1rem;\n\n    box-shadow: rgba(0, 0, 0, 0.16) 0px 3px 6px, rgba(0, 0, 0, 0.23) 0px 3px 6px;\n}\n\n#info-body .heading {\n    font-size: 2rem;\n    padding-bottom: 1rem;\n    margin-bottom: 1rem;\n    border-bottom: 0.25rem solid #eee;\n}\n\n\n@media only screen and (max-width: 600px) {\n    #info-box[open] > #info-body {\n        width: 90%;\n        left: 5%;\n    }\n\n    #info-body .heading {\n        font-size: 1.4rem;\n        padding-bottom: 1rem;\n        margin-bottom: 1rem;\n        border-bottom: 0.25rem solid #eee;\n    }\n}\n\n@keyframes fadeBg {\n    from {\n        opacity: 0%;\n    }\n    to {\n        opacity: 30%;\n    }\n}\n\n\n@keyframes fadeBody {\n    from {\n        top: 100%;\n    }\n    to {\n        top: 10%;\n    }\n}\n\n`, "",{"version":3,"sources":["webpack://./src/dialog.css"],"names":[],"mappings":"AAAA;;IAEI,oBAAoB;IACpB,UAAU;IACV,aAAa;IACb,eAAe;IACf,WAAW;IACX,YAAY;IACZ,UAAU;IACV,YAAY;AAChB;;AAEA;IACI,gBAAgB;IAChB,cAAc;AAClB;;AAEA;IACI,oBAAoB;IACpB,WAAW;IACX,eAAe;IACf,8BAA8B;IAC9B,WAAW;IACX,YAAY;IACZ,iBAAiB;;AAErB;;AAEA;IACI,mBAAmB;IACnB,aAAa;IACb,WAAW;IACX,eAAe;IACf,gBAAgB;IAChB,UAAU;IACV,WAAW;IACX,gCAAgC;IAChC,SAAS;IACT,mBAAmB;;IAEnB,4EAA4E;AAChF;;AAEA;IACI,eAAe;IACf,oBAAoB;IACpB,mBAAmB;IACnB,iCAAiC;AACrC;;;AAGA;IACI;QACI,UAAU;QACV,QAAQ;IACZ;;IAEA;QACI,iBAAiB;QACjB,oBAAoB;QACpB,mBAAmB;QACnB,iCAAiC;IACrC;AACJ;;AAEA;IACI;QACI,WAAW;IACf;IACA;QACI,YAAY;IAChB;AACJ;;;AAGA;IACI;QACI,SAAS;IACb;IACA;QACI,QAAQ;IACZ;AACJ","sourcesContent":["#info-box {\\n\\n    pointer-events: none;\\n    padding: 0;\\n    display: none;\\n    position: fixed;\\n    width: 100%;\\n    height: 100%;\\n    z-index: 9;\\n    border: none;\\n}\\n\\n#info-box[open] {\\n    background: none;\\n    display: block;\\n}\\n\\n#info-box[open] > .info-bg {\\n    pointer-events: none;\\n    z-index: 10;\\n    position: fixed;\\n    animation: fadeBg .2s forwards;\\n    width: 100%;\\n    height: 100%;\\n    background: black;\\n\\n}\\n\\n#info-box[open] > #info-body {\\n    pointer-events: all;\\n    padding: 3rem;\\n    z-index: 11;\\n    position: fixed;\\n    background: #fff;\\n    width: 60%;\\n    height: 80%;\\n    animation: fadeBody .2s forwards;\\n    left: 20%;\\n    border-radius: 1rem;\\n\\n    box-shadow: rgba(0, 0, 0, 0.16) 0px 3px 6px, rgba(0, 0, 0, 0.23) 0px 3px 6px;\\n}\\n\\n#info-body .heading {\\n    font-size: 2rem;\\n    padding-bottom: 1rem;\\n    margin-bottom: 1rem;\\n    border-bottom: 0.25rem solid #eee;\\n}\\n\\n\\n@media only screen and (max-width: 600px) {\\n    #info-box[open] > #info-body {\\n        width: 90%;\\n        left: 5%;\\n    }\\n\\n    #info-body .heading {\\n        font-size: 1.4rem;\\n        padding-bottom: 1rem;\\n        margin-bottom: 1rem;\\n        border-bottom: 0.25rem solid #eee;\\n    }\\n}\\n\\n@keyframes fadeBg {\\n    from {\\n        opacity: 0%;\\n    }\\n    to {\\n        opacity: 30%;\\n    }\\n}\\n\\n\\n@keyframes fadeBody {\\n    from {\\n        top: 100%;\\n    }\\n    to {\\n        top: 10%;\\n    }\\n}\\n\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQzBHO0FBQ2pCO0FBQ3pGLDhCQUE4QixtRkFBMkIsQ0FBQyw0RkFBcUM7QUFDL0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBTyxrRkFBa0YsWUFBWSxXQUFXLFVBQVUsVUFBVSxVQUFVLFVBQVUsVUFBVSxVQUFVLE9BQU8sS0FBSyxZQUFZLFdBQVcsT0FBTyxLQUFLLFlBQVksV0FBVyxVQUFVLFlBQVksV0FBVyxVQUFVLGFBQWEsT0FBTyxLQUFLLFlBQVksV0FBVyxVQUFVLFVBQVUsWUFBWSxXQUFXLFVBQVUsWUFBWSxXQUFXLGFBQWEsYUFBYSxPQUFPLEtBQUssVUFBVSxZQUFZLGFBQWEsYUFBYSxRQUFRLEtBQUssS0FBSyxVQUFVLFVBQVUsTUFBTSxLQUFLLFlBQVksYUFBYSxhQUFhLGFBQWEsTUFBTSxNQUFNLEtBQUssS0FBSyxVQUFVLEtBQUssS0FBSyxVQUFVLE1BQU0sT0FBTyxLQUFLLEtBQUssVUFBVSxLQUFLLEtBQUssVUFBVSxLQUFLLG9DQUFvQyw2QkFBNkIsaUJBQWlCLG9CQUFvQixzQkFBc0Isa0JBQWtCLG1CQUFtQixpQkFBaUIsbUJBQW1CLEdBQUcscUJBQXFCLHVCQUF1QixxQkFBcUIsR0FBRyxnQ0FBZ0MsMkJBQTJCLGtCQUFrQixzQkFBc0IscUNBQXFDLGtCQUFrQixtQkFBbUIsd0JBQXdCLEtBQUssa0NBQWtDLDBCQUEwQixvQkFBb0Isa0JBQWtCLHNCQUFzQix1QkFBdUIsaUJBQWlCLGtCQUFrQix1Q0FBdUMsZ0JBQWdCLDBCQUEwQixxRkFBcUYsR0FBRyx5QkFBeUIsc0JBQXNCLDJCQUEyQiwwQkFBMEIsd0NBQXdDLEdBQUcsaURBQWlELG9DQUFvQyxxQkFBcUIsbUJBQW1CLE9BQU8sNkJBQTZCLDRCQUE0QiwrQkFBK0IsOEJBQThCLDRDQUE0QyxPQUFPLEdBQUcsdUJBQXVCLFlBQVksc0JBQXNCLE9BQU8sVUFBVSx1QkFBdUIsT0FBTyxHQUFHLDJCQUEyQixZQUFZLG9CQUFvQixPQUFPLFVBQVUsbUJBQW1CLE9BQU8sR0FBRyx1QkFBdUI7QUFDNXBFO0FBQ0EsaUVBQWUsdUJBQXVCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvZGlhbG9nLmNzcz84ZDJjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAjaW5mby1ib3gge1xuXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgcGFkZGluZzogMDtcbiAgICBkaXNwbGF5OiBub25lO1xuICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgei1pbmRleDogOTtcbiAgICBib3JkZXI6IG5vbmU7XG59XG5cbiNpbmZvLWJveFtvcGVuXSB7XG4gICAgYmFja2dyb3VuZDogbm9uZTtcbiAgICBkaXNwbGF5OiBibG9jaztcbn1cblxuI2luZm8tYm94W29wZW5dID4gLmluZm8tYmcge1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgIHotaW5kZXg6IDEwO1xuICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICBhbmltYXRpb246IGZhZGVCZyAuMnMgZm9yd2FyZHM7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIGJhY2tncm91bmQ6IGJsYWNrO1xuXG59XG5cbiNpbmZvLWJveFtvcGVuXSA+ICNpbmZvLWJvZHkge1xuICAgIHBvaW50ZXItZXZlbnRzOiBhbGw7XG4gICAgcGFkZGluZzogM3JlbTtcbiAgICB6LWluZGV4OiAxMTtcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgYmFja2dyb3VuZDogI2ZmZjtcbiAgICB3aWR0aDogNjAlO1xuICAgIGhlaWdodDogODAlO1xuICAgIGFuaW1hdGlvbjogZmFkZUJvZHkgLjJzIGZvcndhcmRzO1xuICAgIGxlZnQ6IDIwJTtcbiAgICBib3JkZXItcmFkaXVzOiAxcmVtO1xuXG4gICAgYm94LXNoYWRvdzogcmdiYSgwLCAwLCAwLCAwLjE2KSAwcHggM3B4IDZweCwgcmdiYSgwLCAwLCAwLCAwLjIzKSAwcHggM3B4IDZweDtcbn1cblxuI2luZm8tYm9keSAuaGVhZGluZyB7XG4gICAgZm9udC1zaXplOiAycmVtO1xuICAgIHBhZGRpbmctYm90dG9tOiAxcmVtO1xuICAgIG1hcmdpbi1ib3R0b206IDFyZW07XG4gICAgYm9yZGVyLWJvdHRvbTogMC4yNXJlbSBzb2xpZCAjZWVlO1xufVxuXG5cbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjAwcHgpIHtcbiAgICAjaW5mby1ib3hbb3Blbl0gPiAjaW5mby1ib2R5IHtcbiAgICAgICAgd2lkdGg6IDkwJTtcbiAgICAgICAgbGVmdDogNSU7XG4gICAgfVxuXG4gICAgI2luZm8tYm9keSAuaGVhZGluZyB7XG4gICAgICAgIGZvbnQtc2l6ZTogMS40cmVtO1xuICAgICAgICBwYWRkaW5nLWJvdHRvbTogMXJlbTtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMXJlbTtcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogMC4yNXJlbSBzb2xpZCAjZWVlO1xuICAgIH1cbn1cblxuQGtleWZyYW1lcyBmYWRlQmcge1xuICAgIGZyb20ge1xuICAgICAgICBvcGFjaXR5OiAwJTtcbiAgICB9XG4gICAgdG8ge1xuICAgICAgICBvcGFjaXR5OiAzMCU7XG4gICAgfVxufVxuXG5cbkBrZXlmcmFtZXMgZmFkZUJvZHkge1xuICAgIGZyb20ge1xuICAgICAgICB0b3A6IDEwMCU7XG4gICAgfVxuICAgIHRvIHtcbiAgICAgICAgdG9wOiAxMCU7XG4gICAgfVxufVxuXG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9kaWFsb2cuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBOztJQUVJLG9CQUFvQjtJQUNwQixVQUFVO0lBQ1YsYUFBYTtJQUNiLGVBQWU7SUFDZixXQUFXO0lBQ1gsWUFBWTtJQUNaLFVBQVU7SUFDVixZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGNBQWM7QUFDbEI7O0FBRUE7SUFDSSxvQkFBb0I7SUFDcEIsV0FBVztJQUNYLGVBQWU7SUFDZiw4QkFBOEI7SUFDOUIsV0FBVztJQUNYLFlBQVk7SUFDWixpQkFBaUI7O0FBRXJCOztBQUVBO0lBQ0ksbUJBQW1CO0lBQ25CLGFBQWE7SUFDYixXQUFXO0lBQ1gsZUFBZTtJQUNmLGdCQUFnQjtJQUNoQixVQUFVO0lBQ1YsV0FBVztJQUNYLGdDQUFnQztJQUNoQyxTQUFTO0lBQ1QsbUJBQW1COztJQUVuQiw0RUFBNEU7QUFDaEY7O0FBRUE7SUFDSSxlQUFlO0lBQ2Ysb0JBQW9CO0lBQ3BCLG1CQUFtQjtJQUNuQixpQ0FBaUM7QUFDckM7OztBQUdBO0lBQ0k7UUFDSSxVQUFVO1FBQ1YsUUFBUTtJQUNaOztJQUVBO1FBQ0ksaUJBQWlCO1FBQ2pCLG9CQUFvQjtRQUNwQixtQkFBbUI7UUFDbkIsaUNBQWlDO0lBQ3JDO0FBQ0o7O0FBRUE7SUFDSTtRQUNJLFdBQVc7SUFDZjtJQUNBO1FBQ0ksWUFBWTtJQUNoQjtBQUNKOzs7QUFHQTtJQUNJO1FBQ0ksU0FBUztJQUNiO0lBQ0E7UUFDSSxRQUFRO0lBQ1o7QUFDSlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIjaW5mby1ib3gge1xcblxcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gICAgcG9zaXRpb246IGZpeGVkO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICB6LWluZGV4OiA5O1xcbiAgICBib3JkZXI6IG5vbmU7XFxufVxcblxcbiNpbmZvLWJveFtvcGVuXSB7XFxuICAgIGJhY2tncm91bmQ6IG5vbmU7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG4jaW5mby1ib3hbb3Blbl0gPiAuaW5mby1iZyB7XFxuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbiAgICB6LWluZGV4OiAxMDtcXG4gICAgcG9zaXRpb246IGZpeGVkO1xcbiAgICBhbmltYXRpb246IGZhZGVCZyAuMnMgZm9yd2FyZHM7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIGJhY2tncm91bmQ6IGJsYWNrO1xcblxcbn1cXG5cXG4jaW5mby1ib3hbb3Blbl0gPiAjaW5mby1ib2R5IHtcXG4gICAgcG9pbnRlci1ldmVudHM6IGFsbDtcXG4gICAgcGFkZGluZzogM3JlbTtcXG4gICAgei1pbmRleDogMTE7XFxuICAgIHBvc2l0aW9uOiBmaXhlZDtcXG4gICAgYmFja2dyb3VuZDogI2ZmZjtcXG4gICAgd2lkdGg6IDYwJTtcXG4gICAgaGVpZ2h0OiA4MCU7XFxuICAgIGFuaW1hdGlvbjogZmFkZUJvZHkgLjJzIGZvcndhcmRzO1xcbiAgICBsZWZ0OiAyMCU7XFxuICAgIGJvcmRlci1yYWRpdXM6IDFyZW07XFxuXFxuICAgIGJveC1zaGFkb3c6IHJnYmEoMCwgMCwgMCwgMC4xNikgMHB4IDNweCA2cHgsIHJnYmEoMCwgMCwgMCwgMC4yMykgMHB4IDNweCA2cHg7XFxufVxcblxcbiNpbmZvLWJvZHkgLmhlYWRpbmcge1xcbiAgICBmb250LXNpemU6IDJyZW07XFxuICAgIHBhZGRpbmctYm90dG9tOiAxcmVtO1xcbiAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xcbiAgICBib3JkZXItYm90dG9tOiAwLjI1cmVtIHNvbGlkICNlZWU7XFxufVxcblxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNjAwcHgpIHtcXG4gICAgI2luZm8tYm94W29wZW5dID4gI2luZm8tYm9keSB7XFxuICAgICAgICB3aWR0aDogOTAlO1xcbiAgICAgICAgbGVmdDogNSU7XFxuICAgIH1cXG5cXG4gICAgI2luZm8tYm9keSAuaGVhZGluZyB7XFxuICAgICAgICBmb250LXNpemU6IDEuNHJlbTtcXG4gICAgICAgIHBhZGRpbmctYm90dG9tOiAxcmVtO1xcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMXJlbTtcXG4gICAgICAgIGJvcmRlci1ib3R0b206IDAuMjVyZW0gc29saWQgI2VlZTtcXG4gICAgfVxcbn1cXG5cXG5Aa2V5ZnJhbWVzIGZhZGVCZyB7XFxuICAgIGZyb20ge1xcbiAgICAgICAgb3BhY2l0eTogMCU7XFxuICAgIH1cXG4gICAgdG8ge1xcbiAgICAgICAgb3BhY2l0eTogMzAlO1xcbiAgICB9XFxufVxcblxcblxcbkBrZXlmcmFtZXMgZmFkZUJvZHkge1xcbiAgICBmcm9tIHtcXG4gICAgICAgIHRvcDogMTAwJTtcXG4gICAgfVxcbiAgICB0byB7XFxuICAgICAgICB0b3A6IDEwJTtcXG4gICAgfVxcbn1cXG5cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///71\n')},568:(module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `:root {\n    --priorityOne: #888;\n    --priorityTwo: #444;\n    --priorityThree: #000;\n}\n\nmain {\n    position: relative;\n    justify-content: baseline;\n    width: auto;\n    padding: 2rem;\n    height: 100%;\n    width: auto;\n}\n\nmain.empty {\n    display: grid;\n    place-items: center;\n}\n\nmain:not(.empty) #blank-content {\n    display: none;\n}\n\n/* Blank Content info box */\n\n#blank-content {\n    text-align: center;\n    color: #888;\n    flex-direction: column;\n    align-items: center;\n    font-size: 3rem;\n    gap: 3rem;\n\n    background-color: #ddd;\n    padding: 3rem;\n    border-radius: 2rem;\n}\n\n#blank-content > iconify-icon {\n    font-size: 6rem;\n}\n\n#blank-content > span {\n    font-size: 2rem;\n}\n\n/* Main content UL */ \nmain > ul {\n    height: 100%;\n    width: 100%;\n    overflow-x: auto;\n    padding: 2rem;\n    flex-direction: column;\n}\n\nmain > .gradient {\n    pointer-events: none;\n    position: absolute;\n    z-index: 1;\n    top: 2rem;\n    left: 2rem;\n    width: calc(100% - 4rem);\n    height: 4rem;\n}\n\nmain > .top {\n    background: rgb(238,238,238);\n    background: linear-gradient(180deg, rgba(238,238,238,1) 40%, rgba(238,238,238,0) 100%); \n}\n\nmain > .bottom {\n    top: calc(100% - 6rem);\n    background: rgb(238,238,238);\n    background: linear-gradient(0deg, rgba(238,238,238,1) 40%, rgba(238,238,238,0) 100%); \n}\n\n@media only screen and (max-width: 600px) {\n    main > .gradient {\n\n        top: 1rem;\n        left: 1 rem;\n        width: calc(100% - 2rem);\n        height: 4rem;\n    }\n\n    main > .bottom {\n        top: calc(100% - 4rem - 13dvh);\n        background: rgb(238,238,238);\n        background: linear-gradient(0deg, rgba(238,238,238,1) 40%, rgba(238,238,238,0) 100%); \n    }\n    \n}\n\nmain > ul > li {\n    position: relative;\n    align-items: center;\n    padding: 0.75rem;\n    border-radius: 0.5rem;\n}\n\nmain > ul > li:hover {\n    background: #ddd;\n}\n\nmain > ul > li > span {\n    pointer-events: none;\n    user-select: none;\n    margin-right: auto;\n}\n\nmain > ul > li > iconify-icon  {\n    cursor: pointer;\n    font-size: 2rem;\n    padding: 0.5rem;\n    display: flex;\n}\n\n.more {\n    font-size: 1.5rem;\n    border-radius: 0.5rem;\n    color: #000;\n    transition: background-color .2s, color .2s, box-shadow .2s;\n}\n\n.more:hover, main > ul > li:has(.more-content.show) .more {\n    background-color: #fff;\n    z-index: 3;\n    box-shadow: rgba(0, 0, 0, 0.16) 0px 3px 6px, rgba(0, 0, 0, 0.23) 0px 3px 6px;\n}\n\n.more-content {\n    display: none;\n    background-color: #eee;\n    box-shadow: none;\n\n    pointer-events: none;\n\n\n    position: absolute;\n    border-radius: 0.5rem;\n    top: calc(2rem - 1.25rem);\n    left: calc(100%);\n    height: 3rem;\n    padding: 0.5rem;\n    \n}\n\n.more-content.show {\n\n    pointer-events: all;\n    transition: background-color .3s,  box-shadow .3s;\n    background-color: #fff;\n    \n    animation: swipe .1s forwards;\n    box-shadow: rgba(0, 0, 0, 0.16) 0px 3px 6px, rgba(0, 0, 0, 0.23) 0px 3px 6px;\n    z-index: 2;\n    display: flex;\n    align-items: center;\n}\n\n.more-content.show > * {\n    color: #000;\n    cursor: pointer;\n    animation: swipeContent .3s forwards;\n    font-size: 1.25rem;\n    transition: font-size .3s;\n    padding: .5rem;\n    border-radius: 0.5rem;\n}\n\n.more-content.show > *:hover {\n    font-size: 1.5rem;\n    background-color: #eee;\n}\n\nmain > ul > li.one {\n    color: var(--priorityOne);\n    font-style: italic;\n}\n\nmain > ul > li.two {\n    color: var(--priorityTwo);\n    font-size: 1.25rem;\n}\n\nmain > ul > li.three {\n    color: var(--priorityThree);\n    font-weight: bold;\n    font-size: 1.5rem;\n}\n\n@keyframes swipe {\n    from {\n        left: calc(100% - 0.5rem - 1rem);\n        width: 1rem;\n    }\n    to {\n        left: calc(100% - 0.5rem - 18rem);\n        width: 18rem;\n    }\n}\n\n@keyframes swipeContent {\n    from {\n        opacity: 0%;\n    }\n    to {\n        opacity: 100%;\n    }\n}`, "",{"version":3,"sources":["webpack://./src/main.css"],"names":[],"mappings":"AAAA;IACI,mBAAmB;IACnB,mBAAmB;IACnB,qBAAqB;AACzB;;AAEA;IACI,kBAAkB;IAClB,yBAAyB;IACzB,WAAW;IACX,aAAa;IACb,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,aAAa;AACjB;;AAEA,2BAA2B;;AAE3B;IACI,kBAAkB;IAClB,WAAW;IACX,sBAAsB;IACtB,mBAAmB;IACnB,eAAe;IACf,SAAS;;IAET,sBAAsB;IACtB,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA,oBAAoB;AACpB;IACI,YAAY;IACZ,WAAW;IACX,gBAAgB;IAChB,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,oBAAoB;IACpB,kBAAkB;IAClB,UAAU;IACV,SAAS;IACT,UAAU;IACV,wBAAwB;IACxB,YAAY;AAChB;;AAEA;IACI,4BAA4B;IAC5B,sFAAsF;AAC1F;;AAEA;IACI,sBAAsB;IACtB,4BAA4B;IAC5B,oFAAoF;AACxF;;AAEA;IACI;;QAEI,SAAS;QACT,WAAW;QACX,wBAAwB;QACxB,YAAY;IAChB;;IAEA;QACI,8BAA8B;QAC9B,4BAA4B;QAC5B,oFAAoF;IACxF;;AAEJ;;AAEA;IACI,kBAAkB;IAClB,mBAAmB;IACnB,gBAAgB;IAChB,qBAAqB;AACzB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,oBAAoB;IACpB,iBAAiB;IACjB,kBAAkB;AACtB;;AAEA;IACI,eAAe;IACf,eAAe;IACf,eAAe;IACf,aAAa;AACjB;;AAEA;IACI,iBAAiB;IACjB,qBAAqB;IACrB,WAAW;IACX,2DAA2D;AAC/D;;AAEA;IACI,sBAAsB;IACtB,UAAU;IACV,4EAA4E;AAChF;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,gBAAgB;;IAEhB,oBAAoB;;;IAGpB,kBAAkB;IAClB,qBAAqB;IACrB,yBAAyB;IACzB,gBAAgB;IAChB,YAAY;IACZ,eAAe;;AAEnB;;AAEA;;IAEI,mBAAmB;IACnB,iDAAiD;IACjD,sBAAsB;;IAEtB,6BAA6B;IAC7B,4EAA4E;IAC5E,UAAU;IACV,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,WAAW;IACX,eAAe;IACf,oCAAoC;IACpC,kBAAkB;IAClB,yBAAyB;IACzB,cAAc;IACd,qBAAqB;AACzB;;AAEA;IACI,iBAAiB;IACjB,sBAAsB;AAC1B;;AAEA;IACI,yBAAyB;IACzB,kBAAkB;AACtB;;AAEA;IACI,yBAAyB;IACzB,kBAAkB;AACtB;;AAEA;IACI,2BAA2B;IAC3B,iBAAiB;IACjB,iBAAiB;AACrB;;AAEA;IACI;QACI,gCAAgC;QAChC,WAAW;IACf;IACA;QACI,iCAAiC;QACjC,YAAY;IAChB;AACJ;;AAEA;IACI;QACI,WAAW;IACf;IACA;QACI,aAAa;IACjB;AACJ","sourcesContent":[":root {\\n    --priorityOne: #888;\\n    --priorityTwo: #444;\\n    --priorityThree: #000;\\n}\\n\\nmain {\\n    position: relative;\\n    justify-content: baseline;\\n    width: auto;\\n    padding: 2rem;\\n    height: 100%;\\n    width: auto;\\n}\\n\\nmain.empty {\\n    display: grid;\\n    place-items: center;\\n}\\n\\nmain:not(.empty) #blank-content {\\n    display: none;\\n}\\n\\n/* Blank Content info box */\\n\\n#blank-content {\\n    text-align: center;\\n    color: #888;\\n    flex-direction: column;\\n    align-items: center;\\n    font-size: 3rem;\\n    gap: 3rem;\\n\\n    background-color: #ddd;\\n    padding: 3rem;\\n    border-radius: 2rem;\\n}\\n\\n#blank-content > iconify-icon {\\n    font-size: 6rem;\\n}\\n\\n#blank-content > span {\\n    font-size: 2rem;\\n}\\n\\n/* Main content UL */ \\nmain > ul {\\n    height: 100%;\\n    width: 100%;\\n    overflow-x: auto;\\n    padding: 2rem;\\n    flex-direction: column;\\n}\\n\\nmain > .gradient {\\n    pointer-events: none;\\n    position: absolute;\\n    z-index: 1;\\n    top: 2rem;\\n    left: 2rem;\\n    width: calc(100% - 4rem);\\n    height: 4rem;\\n}\\n\\nmain > .top {\\n    background: rgb(238,238,238);\\n    background: linear-gradient(180deg, rgba(238,238,238,1) 40%, rgba(238,238,238,0) 100%); \\n}\\n\\nmain > .bottom {\\n    top: calc(100% - 6rem);\\n    background: rgb(238,238,238);\\n    background: linear-gradient(0deg, rgba(238,238,238,1) 40%, rgba(238,238,238,0) 100%); \\n}\\n\\n@media only screen and (max-width: 600px) {\\n    main > .gradient {\\n\\n        top: 1rem;\\n        left: 1 rem;\\n        width: calc(100% - 2rem);\\n        height: 4rem;\\n    }\\n\\n    main > .bottom {\\n        top: calc(100% - 4rem - 13dvh);\\n        background: rgb(238,238,238);\\n        background: linear-gradient(0deg, rgba(238,238,238,1) 40%, rgba(238,238,238,0) 100%); \\n    }\\n    \\n}\\n\\nmain > ul > li {\\n    position: relative;\\n    align-items: center;\\n    padding: 0.75rem;\\n    border-radius: 0.5rem;\\n}\\n\\nmain > ul > li:hover {\\n    background: #ddd;\\n}\\n\\nmain > ul > li > span {\\n    pointer-events: none;\\n    user-select: none;\\n    margin-right: auto;\\n}\\n\\nmain > ul > li > iconify-icon  {\\n    cursor: pointer;\\n    font-size: 2rem;\\n    padding: 0.5rem;\\n    display: flex;\\n}\\n\\n.more {\\n    font-size: 1.5rem;\\n    border-radius: 0.5rem;\\n    color: #000;\\n    transition: background-color .2s, color .2s, box-shadow .2s;\\n}\\n\\n.more:hover, main > ul > li:has(.more-content.show) .more {\\n    background-color: #fff;\\n    z-index: 3;\\n    box-shadow: rgba(0, 0, 0, 0.16) 0px 3px 6px, rgba(0, 0, 0, 0.23) 0px 3px 6px;\\n}\\n\\n.more-content {\\n    display: none;\\n    background-color: #eee;\\n    box-shadow: none;\\n\\n    pointer-events: none;\\n\\n\\n    position: absolute;\\n    border-radius: 0.5rem;\\n    top: calc(2rem - 1.25rem);\\n    left: calc(100%);\\n    height: 3rem;\\n    padding: 0.5rem;\\n    \\n}\\n\\n.more-content.show {\\n\\n    pointer-events: all;\\n    transition: background-color .3s,  box-shadow .3s;\\n    background-color: #fff;\\n    \\n    animation: swipe .1s forwards;\\n    box-shadow: rgba(0, 0, 0, 0.16) 0px 3px 6px, rgba(0, 0, 0, 0.23) 0px 3px 6px;\\n    z-index: 2;\\n    display: flex;\\n    align-items: center;\\n}\\n\\n.more-content.show > * {\\n    color: #000;\\n    cursor: pointer;\\n    animation: swipeContent .3s forwards;\\n    font-size: 1.25rem;\\n    transition: font-size .3s;\\n    padding: .5rem;\\n    border-radius: 0.5rem;\\n}\\n\\n.more-content.show > *:hover {\\n    font-size: 1.5rem;\\n    background-color: #eee;\\n}\\n\\nmain > ul > li.one {\\n    color: var(--priorityOne);\\n    font-style: italic;\\n}\\n\\nmain > ul > li.two {\\n    color: var(--priorityTwo);\\n    font-size: 1.25rem;\\n}\\n\\nmain > ul > li.three {\\n    color: var(--priorityThree);\\n    font-weight: bold;\\n    font-size: 1.5rem;\\n}\\n\\n@keyframes swipe {\\n    from {\\n        left: calc(100% - 0.5rem - 1rem);\\n        width: 1rem;\\n    }\\n    to {\\n        left: calc(100% - 0.5rem - 18rem);\\n        width: 18rem;\\n    }\\n}\\n\\n@keyframes swipeContent {\\n    from {\\n        opacity: 0%;\\n    }\\n    to {\\n        opacity: 100%;\\n    }\\n}"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///568\n')},309:(module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `#sidebar {\n    flex-direction: column;\n    margin: 0.5rem 0.5rem 0 0;\n    width: 30rem;\n    height: 100dvh;\n    padding: 1rem;\n\n    transition: width .3s;\n\n    position: fixed;\n    z-index: 2;\n    top: 0;\n    left: 0;\n    background-color: #fff;\n\n    overflow-x: hidden;\n    overflow-y: hidden;\n\n    border-radius: 0rem 1rem 0rem 0rem;\n    box-shadow: rgba(0, 0, 0, 0.16) 0px 3px 6px, rgba(0, 0, 0, 0.23) 0px 3px 6px;\n}           \n\n#scrollable-sidebar {\n    flex: 1;\n    border-top: 0.25rem solid #eee;\n    border-bottom: 0.25rem solid #eee;\n    flex-direction: column;\n    overflow-y: scroll;\n    scrollbar-width: none;\n    -ms-overflow-style: none;\n}\n\n#scrollable-sidebar > * {\n    padding: 0 1rem;\n    overflow-x: clip;\n    overflow-y: visible;\n}\n\n#scrollable-sidebar > *:first-child {\n    border-top: none;\n}\n\n#scrollable-sidebar::-webkit-scrollbar {\n    display: none;\n}\n\n#sidebar.close {\n    width: 5rem;\n}\n\n#sidebar header {\n    transition: background-color .3s;\n    height: 5rem;\n    position: relative;\n    overflow: visible;\n}\n\n#sidebar .toggle-btn {\n    z-index: 10;\n    cursor: pointer;\n    padding: 0 0.1rem;\n    position: absolute;\n    top: 1rem;\n    right: 0.5rem;\n    color: #888;\n    background-color: #fff;\n    transition: color .1s;\n}\n\n#sidebar:not(.close) .toggle-btn {\n    color: #444;\n}\n\n#sidebar .toggle-btn:hover {\n    color: #444;\n}\n\n\nbody:has(#sidebar.close) main {\n    margin-left: 7rem;\n}\n\nbody:has(#sidebar.close) #sidebar > :not( header) {\n    animation: fade .2s forwards;\n} \n\nbody:has(#sidebar.close) #sidebar > header > :not(.toggle-btn) {\n    animation: fade .2s forwards;\n} \n\nbody:has(#sidebar.close) #sidebar button {\n    pointer-events: none;\n}\n\n#sidebar:first-child {\n    border-top-right-radius: 1rem;\n}\n\n#project-selector {\n    z-index: 3;\n    background: none;\n    border: none;\n    font-size: inherit;\n    transition: background-color .1s;\n    transition: box-shadow .05s;\n    position: relative;\n    padding: 1rem;\n    cursor: pointer;\n    align-items: center;\n    gap: 1ch;\n    width: 75%;\n    border-radius: 0.5rem;\n    box-shadow: none;\n}\n\n#project-selector > * {\n    pointer-events: none;\n}\n\n#project-selector:hover {\n    background-color: #eee;\n}\n\n#project-arrow-icon {\n    font-size: 1.25rem;\n}\n\n#project-icon {\n    margin-right: 1ch;\n    flex-shrink: 0;\n    background: rgb(163,163,163);\n    background: linear-gradient(135deg, rgba(163,163,163,1) 0%, rgba(58,58,58,1) 100%);\n    border-radius: 5%;\n    aspect-ratio: 1 / 1;\n    width: 2rem;\n    align-items: center;\n    justify-content: center;\n    font-weight: 800;\n    color: #fff;\n}\n\n#project-name {\n    font-size: 1.25rem;\n    max-width: 18ch;\n    text-overflow: ellipsis;\n    overflow-x: hidden;\n    white-space: nowrap;\n}\n\n.dropdown-content {\n    display: none;\n    position: absolute;\n    background-color: #f1f1f1;\n    min-width: 75%;\n    box-shadow: rgba(0, 0, 0, 0.16) 0px 3px 6px, rgba(0, 0, 0, 0.23) 0px 3px 6px;\n    z-index: 2;\n}\n\n.dropdown-content div {\n    color: black;\n    padding: 12px 16px;\n    text-decoration: none;\n    display: block;\n}\n\n.dropdown-content div:hover {\n    background-color: #ccc;\n}\n\n#sidebar header:has(.dropdown-content.show) #project-selector {\n    background-color: #eee;\n    box-shadow: rgba(0, 0, 0, 0.16) 0px 3px 6px, rgba(0, 0, 0, 0.23) 0px 3px 6px;\n}\n\n.dropdown-content.show {\n    display: flex;\n    flex-direction: column;\n    margin-top: -0.5rem;\n    padding-top: 0.5rem;\n    height: fit-content;\n    max-height: 12rem;\n    overflow-y: auto;\n    border-radius: 0rem 0rem 1rem 1rem;\n}  \n\n\n#scrollable-sidebar ul {\n    min-height: fit-content;\n    flex-direction: column;\n    margin: 0 1rem;\n    padding: 1rem;\n    gap: 1rem;\n    scrollbar-width: none;\n}\n\n#sidebar ul > li > h3 {\n    border-top: 1px solid #eee;\n    padding: 1.5rem 0 1rem 0;\n    user-select: none;\n}\n\n#sidebar ul > li:first-child > h3{\n    border-top: none;\n    padding: 0.5rem 0 1rem 0;\n}\n\n#sidebar li > button {\n    cursor: pointer;\n    width: 100%;\n    transition: color .3s;\n    transition: background-color .3s;\n    color: #444;\n    border: none;\n    background-color: transparent;\n    align-items: center;\n    padding: 0.75rem;\n    border-radius: 1rem;\n    font-size: 1.25rem;\n    gap: 2ch;\n}\n\n#sidebar li > button:hover {\n    background-color: #eee;\n    color: #000;\n}\n\n#sidebar li > button * {\n    pointer-events: none;\n}\n\n#sidebar li > button > iconify-icon {\n    font-size: 2rem;\n}\n\n#sidebar li > button > span {\n    text-overflow: ellipsis;\n    white-space: nowrap;\n}\n\n#sidebar > footer > ul {\n    margin: 0 1rem;\n    min-height: fit-content;\n    flex-direction: column;\n    padding: 1rem;\n}\n\nmain {\n    transition: margin-left .3s;\n    padding: 1rem;\n}\n\n@media only screen and (max-width: 600px) {\n        \n    #sidebar {\n        flex-direction: column;\n        margin: 0.5rem 1rem 0 1rem;\n        width: calc(100% - 2rem);\n        height: 100dvh;\n        padding: 1rem;\n    \n        transition: top .3s, height .3s;\n        \n        position: fixed;\n        z-index: 2;\n        top: 0;\n        left: 0;\n        background-color: #fff;\n    \n        overflow-x: hidden;\n        overflow-y: hidden;\n    \n        border-radius: 1rem 1rem 0rem 0rem;\n        box-shadow: rgba(0, 0, 0, 0.16) 0px 3px 6px, rgba(0, 0, 0, 0.23) 0px 3px 6px;\n    }    \n\n    #sidebar.close {\n        width: calc(100% - 2rem);\n        height: 13dvh;\n        top: calc(100% - 13dvh);\n    }\n\n    main,\n    body:has(#sidebar.close) main {\n        margin-left: 0;\n        padding: 1rem;\n        padding-bottom: 13dvh;\n    }\n\n    \n}\n\n@keyframes fade {\n    from {\n        opacity: 100%;\n    }\n    to {\n        opacity: 0%;\n        display: none;\n    }\n}\n\n@keyframes transition {\n    \n}`, "",{"version":3,"sources":["webpack://./src/navbar.css"],"names":[],"mappings":"AAAA;IACI,sBAAsB;IACtB,yBAAyB;IACzB,YAAY;IACZ,cAAc;IACd,aAAa;;IAEb,qBAAqB;;IAErB,eAAe;IACf,UAAU;IACV,MAAM;IACN,OAAO;IACP,sBAAsB;;IAEtB,kBAAkB;IAClB,kBAAkB;;IAElB,kCAAkC;IAClC,4EAA4E;AAChF;;AAEA;IACI,OAAO;IACP,8BAA8B;IAC9B,iCAAiC;IACjC,sBAAsB;IACtB,kBAAkB;IAClB,qBAAqB;IACrB,wBAAwB;AAC5B;;AAEA;IACI,eAAe;IACf,gBAAgB;IAChB,mBAAmB;AACvB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,gCAAgC;IAChC,YAAY;IACZ,kBAAkB;IAClB,iBAAiB;AACrB;;AAEA;IACI,WAAW;IACX,eAAe;IACf,iBAAiB;IACjB,kBAAkB;IAClB,SAAS;IACT,aAAa;IACb,WAAW;IACX,sBAAsB;IACtB,qBAAqB;AACzB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,WAAW;AACf;;;AAGA;IACI,iBAAiB;AACrB;;AAEA;IACI,4BAA4B;AAChC;;AAEA;IACI,4BAA4B;AAChC;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI,6BAA6B;AACjC;;AAEA;IACI,UAAU;IACV,gBAAgB;IAChB,YAAY;IACZ,kBAAkB;IAClB,gCAAgC;IAChC,2BAA2B;IAC3B,kBAAkB;IAClB,aAAa;IACb,eAAe;IACf,mBAAmB;IACnB,QAAQ;IACR,UAAU;IACV,qBAAqB;IACrB,gBAAgB;AACpB;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,iBAAiB;IACjB,cAAc;IACd,4BAA4B;IAC5B,kFAAkF;IAClF,iBAAiB;IACjB,mBAAmB;IACnB,WAAW;IACX,mBAAmB;IACnB,uBAAuB;IACvB,gBAAgB;IAChB,WAAW;AACf;;AAEA;IACI,kBAAkB;IAClB,eAAe;IACf,uBAAuB;IACvB,kBAAkB;IAClB,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,kBAAkB;IAClB,yBAAyB;IACzB,cAAc;IACd,4EAA4E;IAC5E,UAAU;AACd;;AAEA;IACI,YAAY;IACZ,kBAAkB;IAClB,qBAAqB;IACrB,cAAc;AAClB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;IACtB,4EAA4E;AAChF;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,mBAAmB;IACnB,mBAAmB;IACnB,iBAAiB;IACjB,gBAAgB;IAChB,kCAAkC;AACtC;;;AAGA;IACI,uBAAuB;IACvB,sBAAsB;IACtB,cAAc;IACd,aAAa;IACb,SAAS;IACT,qBAAqB;AACzB;;AAEA;IACI,0BAA0B;IAC1B,wBAAwB;IACxB,iBAAiB;AACrB;;AAEA;IACI,gBAAgB;IAChB,wBAAwB;AAC5B;;AAEA;IACI,eAAe;IACf,WAAW;IACX,qBAAqB;IACrB,gCAAgC;IAChC,WAAW;IACX,YAAY;IACZ,6BAA6B;IAC7B,mBAAmB;IACnB,gBAAgB;IAChB,mBAAmB;IACnB,kBAAkB;IAClB,QAAQ;AACZ;;AAEA;IACI,sBAAsB;IACtB,WAAW;AACf;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,cAAc;IACd,uBAAuB;IACvB,sBAAsB;IACtB,aAAa;AACjB;;AAEA;IACI,2BAA2B;IAC3B,aAAa;AACjB;;AAEA;;IAEI;QACI,sBAAsB;QACtB,0BAA0B;QAC1B,wBAAwB;QACxB,cAAc;QACd,aAAa;;QAEb,+BAA+B;;QAE/B,eAAe;QACf,UAAU;QACV,MAAM;QACN,OAAO;QACP,sBAAsB;;QAEtB,kBAAkB;QAClB,kBAAkB;;QAElB,kCAAkC;QAClC,4EAA4E;IAChF;;IAEA;QACI,wBAAwB;QACxB,aAAa;QACb,uBAAuB;IAC3B;;IAEA;;QAEI,cAAc;QACd,aAAa;QACb,qBAAqB;IACzB;;;AAGJ;;AAEA;IACI;QACI,aAAa;IACjB;IACA;QACI,WAAW;QACX,aAAa;IACjB;AACJ;;AAEA;;AAEA","sourcesContent":["#sidebar {\\n    flex-direction: column;\\n    margin: 0.5rem 0.5rem 0 0;\\n    width: 30rem;\\n    height: 100dvh;\\n    padding: 1rem;\\n\\n    transition: width .3s;\\n\\n    position: fixed;\\n    z-index: 2;\\n    top: 0;\\n    left: 0;\\n    background-color: #fff;\\n\\n    overflow-x: hidden;\\n    overflow-y: hidden;\\n\\n    border-radius: 0rem 1rem 0rem 0rem;\\n    box-shadow: rgba(0, 0, 0, 0.16) 0px 3px 6px, rgba(0, 0, 0, 0.23) 0px 3px 6px;\\n}           \\n\\n#scrollable-sidebar {\\n    flex: 1;\\n    border-top: 0.25rem solid #eee;\\n    border-bottom: 0.25rem solid #eee;\\n    flex-direction: column;\\n    overflow-y: scroll;\\n    scrollbar-width: none;\\n    -ms-overflow-style: none;\\n}\\n\\n#scrollable-sidebar > * {\\n    padding: 0 1rem;\\n    overflow-x: clip;\\n    overflow-y: visible;\\n}\\n\\n#scrollable-sidebar > *:first-child {\\n    border-top: none;\\n}\\n\\n#scrollable-sidebar::-webkit-scrollbar {\\n    display: none;\\n}\\n\\n#sidebar.close {\\n    width: 5rem;\\n}\\n\\n#sidebar header {\\n    transition: background-color .3s;\\n    height: 5rem;\\n    position: relative;\\n    overflow: visible;\\n}\\n\\n#sidebar .toggle-btn {\\n    z-index: 10;\\n    cursor: pointer;\\n    padding: 0 0.1rem;\\n    position: absolute;\\n    top: 1rem;\\n    right: 0.5rem;\\n    color: #888;\\n    background-color: #fff;\\n    transition: color .1s;\\n}\\n\\n#sidebar:not(.close) .toggle-btn {\\n    color: #444;\\n}\\n\\n#sidebar .toggle-btn:hover {\\n    color: #444;\\n}\\n\\n\\nbody:has(#sidebar.close) main {\\n    margin-left: 7rem;\\n}\\n\\nbody:has(#sidebar.close) #sidebar > :not( header) {\\n    animation: fade .2s forwards;\\n} \\n\\nbody:has(#sidebar.close) #sidebar > header > :not(.toggle-btn) {\\n    animation: fade .2s forwards;\\n} \\n\\nbody:has(#sidebar.close) #sidebar button {\\n    pointer-events: none;\\n}\\n\\n#sidebar:first-child {\\n    border-top-right-radius: 1rem;\\n}\\n\\n#project-selector {\\n    z-index: 3;\\n    background: none;\\n    border: none;\\n    font-size: inherit;\\n    transition: background-color .1s;\\n    transition: box-shadow .05s;\\n    position: relative;\\n    padding: 1rem;\\n    cursor: pointer;\\n    align-items: center;\\n    gap: 1ch;\\n    width: 75%;\\n    border-radius: 0.5rem;\\n    box-shadow: none;\\n}\\n\\n#project-selector > * {\\n    pointer-events: none;\\n}\\n\\n#project-selector:hover {\\n    background-color: #eee;\\n}\\n\\n#project-arrow-icon {\\n    font-size: 1.25rem;\\n}\\n\\n#project-icon {\\n    margin-right: 1ch;\\n    flex-shrink: 0;\\n    background: rgb(163,163,163);\\n    background: linear-gradient(135deg, rgba(163,163,163,1) 0%, rgba(58,58,58,1) 100%);\\n    border-radius: 5%;\\n    aspect-ratio: 1 / 1;\\n    width: 2rem;\\n    align-items: center;\\n    justify-content: center;\\n    font-weight: 800;\\n    color: #fff;\\n}\\n\\n#project-name {\\n    font-size: 1.25rem;\\n    max-width: 18ch;\\n    text-overflow: ellipsis;\\n    overflow-x: hidden;\\n    white-space: nowrap;\\n}\\n\\n.dropdown-content {\\n    display: none;\\n    position: absolute;\\n    background-color: #f1f1f1;\\n    min-width: 75%;\\n    box-shadow: rgba(0, 0, 0, 0.16) 0px 3px 6px, rgba(0, 0, 0, 0.23) 0px 3px 6px;\\n    z-index: 2;\\n}\\n\\n.dropdown-content div {\\n    color: black;\\n    padding: 12px 16px;\\n    text-decoration: none;\\n    display: block;\\n}\\n\\n.dropdown-content div:hover {\\n    background-color: #ccc;\\n}\\n\\n#sidebar header:has(.dropdown-content.show) #project-selector {\\n    background-color: #eee;\\n    box-shadow: rgba(0, 0, 0, 0.16) 0px 3px 6px, rgba(0, 0, 0, 0.23) 0px 3px 6px;\\n}\\n\\n.dropdown-content.show {\\n    display: flex;\\n    flex-direction: column;\\n    margin-top: -0.5rem;\\n    padding-top: 0.5rem;\\n    height: fit-content;\\n    max-height: 12rem;\\n    overflow-y: auto;\\n    border-radius: 0rem 0rem 1rem 1rem;\\n}  \\n\\n\\n#scrollable-sidebar ul {\\n    min-height: fit-content;\\n    flex-direction: column;\\n    margin: 0 1rem;\\n    padding: 1rem;\\n    gap: 1rem;\\n    scrollbar-width: none;\\n}\\n\\n#sidebar ul > li > h3 {\\n    border-top: 1px solid #eee;\\n    padding: 1.5rem 0 1rem 0;\\n    user-select: none;\\n}\\n\\n#sidebar ul > li:first-child > h3{\\n    border-top: none;\\n    padding: 0.5rem 0 1rem 0;\\n}\\n\\n#sidebar li > button {\\n    cursor: pointer;\\n    width: 100%;\\n    transition: color .3s;\\n    transition: background-color .3s;\\n    color: #444;\\n    border: none;\\n    background-color: transparent;\\n    align-items: center;\\n    padding: 0.75rem;\\n    border-radius: 1rem;\\n    font-size: 1.25rem;\\n    gap: 2ch;\\n}\\n\\n#sidebar li > button:hover {\\n    background-color: #eee;\\n    color: #000;\\n}\\n\\n#sidebar li > button * {\\n    pointer-events: none;\\n}\\n\\n#sidebar li > button > iconify-icon {\\n    font-size: 2rem;\\n}\\n\\n#sidebar li > button > span {\\n    text-overflow: ellipsis;\\n    white-space: nowrap;\\n}\\n\\n#sidebar > footer > ul {\\n    margin: 0 1rem;\\n    min-height: fit-content;\\n    flex-direction: column;\\n    padding: 1rem;\\n}\\n\\nmain {\\n    transition: margin-left .3s;\\n    padding: 1rem;\\n}\\n\\n@media only screen and (max-width: 600px) {\\n        \\n    #sidebar {\\n        flex-direction: column;\\n        margin: 0.5rem 1rem 0 1rem;\\n        width: calc(100% - 2rem);\\n        height: 100dvh;\\n        padding: 1rem;\\n    \\n        transition: top .3s, height .3s;\\n        \\n        position: fixed;\\n        z-index: 2;\\n        top: 0;\\n        left: 0;\\n        background-color: #fff;\\n    \\n        overflow-x: hidden;\\n        overflow-y: hidden;\\n    \\n        border-radius: 1rem 1rem 0rem 0rem;\\n        box-shadow: rgba(0, 0, 0, 0.16) 0px 3px 6px, rgba(0, 0, 0, 0.23) 0px 3px 6px;\\n    }    \\n\\n    #sidebar.close {\\n        width: calc(100% - 2rem);\\n        height: 13dvh;\\n        top: calc(100% - 13dvh);\\n    }\\n\\n    main,\\n    body:has(#sidebar.close) main {\\n        margin-left: 0;\\n        padding: 1rem;\\n        padding-bottom: 13dvh;\\n    }\\n\\n    \\n}\\n\\n@keyframes fade {\\n    from {\\n        opacity: 100%;\\n    }\\n    to {\\n        opacity: 0%;\\n        display: none;\\n    }\\n}\\n\\n@keyframes transition {\\n    \\n}"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///309\n')},365:(module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `* {\n    box-sizing: border-box;\n    margin: 0;\n}\n\n:root {\n    font-family: system-ui, -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Open Sans\', \'Helvetica Neue\', sans-serif;\n}\n\n@media only screen and (max-width: 600px) {\n    :root {\n        font-size: 10pt;\n    }\n}\n\n.flex {\n    display: flex;\n}\n\n.grid {\n    display: grid;\n}\n\nhtml, body {\n    height: 100%;\n    width: 100%;\n    background-color: #efefef;\n}\n\nmain {\n    margin-left: 30rem;\n}\n\nli {\n    list-style: none;\n}`, "",{"version":3,"sources":["webpack://./src/styles.css"],"names":[],"mappings":"AAAA;IACI,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,mJAAmJ;AACvJ;;AAEA;IACI;QACI,eAAe;IACnB;AACJ;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,yBAAyB;AAC7B;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,gBAAgB;AACpB","sourcesContent":["* {\\n    box-sizing: border-box;\\n    margin: 0;\\n}\\n\\n:root {\\n    font-family: system-ui, -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Open Sans\', \'Helvetica Neue\', sans-serif;\\n}\\n\\n@media only screen and (max-width: 600px) {\\n    :root {\\n        font-size: 10pt;\\n    }\\n}\\n\\n.flex {\\n    display: flex;\\n}\\n\\n.grid {\\n    display: grid;\\n}\\n\\nhtml, body {\\n    height: 100%;\\n    width: 100%;\\n    background-color: #efefef;\\n}\\n\\nmain {\\n    margin-left: 30rem;\\n}\\n\\nli {\\n    list-style: none;\\n}"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzY1LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUMwRztBQUNqQjtBQUN6Riw4QkFBOEIsbUZBQTJCLENBQUMsNEZBQXFDO0FBQy9GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQyxPQUFPLGlGQUFpRixZQUFZLFdBQVcsTUFBTSxLQUFLLFlBQVksT0FBTyxLQUFLLEtBQUssVUFBVSxNQUFNLE1BQU0sS0FBSyxVQUFVLE9BQU8sS0FBSyxVQUFVLE9BQU8sS0FBSyxVQUFVLFVBQVUsWUFBWSxPQUFPLEtBQUssWUFBWSxPQUFPLEtBQUssWUFBWSw2QkFBNkIsNkJBQTZCLGdCQUFnQixHQUFHLFdBQVcsMEpBQTBKLEdBQUcsK0NBQStDLGFBQWEsMEJBQTBCLE9BQU8sR0FBRyxXQUFXLG9CQUFvQixHQUFHLFdBQVcsb0JBQW9CLEdBQUcsZ0JBQWdCLG1CQUFtQixrQkFBa0IsZ0NBQWdDLEdBQUcsVUFBVSx5QkFBeUIsR0FBRyxRQUFRLHVCQUF1QixHQUFHLG1CQUFtQjtBQUMzM0I7QUFDQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9zdHlsZXMuY3NzP2U5YWEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYCoge1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgbWFyZ2luOiAwO1xufVxuXG46cm9vdCB7XG4gICAgZm9udC1mYW1pbHk6IHN5c3RlbS11aSwgLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCAnU2Vnb2UgVUknLCBSb2JvdG8sIE94eWdlbiwgVWJ1bnR1LCBDYW50YXJlbGwsICdPcGVuIFNhbnMnLCAnSGVsdmV0aWNhIE5ldWUnLCBzYW5zLXNlcmlmO1xufVxuXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDYwMHB4KSB7XG4gICAgOnJvb3Qge1xuICAgICAgICBmb250LXNpemU6IDEwcHQ7XG4gICAgfVxufVxuXG4uZmxleCB7XG4gICAgZGlzcGxheTogZmxleDtcbn1cblxuLmdyaWQge1xuICAgIGRpc3BsYXk6IGdyaWQ7XG59XG5cbmh0bWwsIGJvZHkge1xuICAgIGhlaWdodDogMTAwJTtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWZlZmVmO1xufVxuXG5tYWluIHtcbiAgICBtYXJnaW4tbGVmdDogMzByZW07XG59XG5cbmxpIHtcbiAgICBsaXN0LXN0eWxlOiBub25lO1xufWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSxzQkFBc0I7SUFDdEIsU0FBUztBQUNiOztBQUVBO0lBQ0ksbUpBQW1KO0FBQ3ZKOztBQUVBO0lBQ0k7UUFDSSxlQUFlO0lBQ25CO0FBQ0o7O0FBRUE7SUFDSSxhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksYUFBYTtBQUNqQjs7QUFFQTtJQUNJLFlBQVk7SUFDWixXQUFXO0lBQ1gseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0ksa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksZ0JBQWdCO0FBQ3BCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIioge1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICBtYXJnaW46IDA7XFxufVxcblxcbjpyb290IHtcXG4gICAgZm9udC1mYW1pbHk6IHN5c3RlbS11aSwgLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCAnU2Vnb2UgVUknLCBSb2JvdG8sIE94eWdlbiwgVWJ1bnR1LCBDYW50YXJlbGwsICdPcGVuIFNhbnMnLCAnSGVsdmV0aWNhIE5ldWUnLCBzYW5zLXNlcmlmO1xcbn1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDYwMHB4KSB7XFxuICAgIDpyb290IHtcXG4gICAgICAgIGZvbnQtc2l6ZTogMTBwdDtcXG4gICAgfVxcbn1cXG5cXG4uZmxleCB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxufVxcblxcbi5ncmlkIHtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG59XFxuXFxuaHRtbCwgYm9keSB7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNlZmVmZWY7XFxufVxcblxcbm1haW4ge1xcbiAgICBtYXJnaW4tbGVmdDogMzByZW07XFxufVxcblxcbmxpIHtcXG4gICAgbGlzdC1zdHlsZTogbm9uZTtcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///365\n')},314:module=>{eval('\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = "";\n      var needLayer = typeof item[5] !== "undefined";\n      if (item[4]) {\n        content += "@supports (".concat(item[4], ") {");\n      }\n      if (item[2]) {\n        content += "@media ".concat(item[2], " {");\n      }\n      if (needLayer) {\n        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += "}";\n      }\n      if (item[2]) {\n        content += "}";\n      }\n      if (item[4]) {\n        content += "}";\n      }\n      return content;\n    }).join("");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === "string") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== "undefined") {\n        if (typeof item[5] === "undefined") {\n          item[5] = layer;\n        } else {\n          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = "".concat(supports);\n        } else {\n          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzE0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0EscUZBQXFGO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixpQkFBaUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHFCQUFxQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzRkFBc0YscUJBQXFCO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixpREFBaUQscUJBQXFCO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzREFBc0QscUJBQXFCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzPzI0ZmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///314\n')},354:module=>{eval('\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === "function") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);\n    var sourceMapping = "/*# ".concat(data, " */");\n    return [content].concat([sourceMapping]).join("\\n");\n  }\n  return [content].join("\\n");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzU0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsY0FBYztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanM/YWYxMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///354\n')},72:module=>{eval('\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = "".concat(id, " ").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHdCQUF3QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw0QkFBNEI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw2QkFBNkI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanM/MmRiYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///72\n')},659:module=>{eval('\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === "undefined") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error("Couldn\'t find a style target. This probably means that the value for the \'insert\' parameter is invalid.");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjU5LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanM/YjIxNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///659\n')},540:module=>{eval('\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement("style");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQwLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanM/ZGU2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///540\n')},56:(module,__unused_webpack_exports,__webpack_require__)=>{eval('\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n  if (nonce) {\n    styleElement.setAttribute("nonce", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBLGNBQWMsS0FBd0MsR0FBRyxzQkFBaUIsR0FBRyxDQUFJO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanM/ZGRjZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///56\n')},825:module=>{eval('\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = "";\n  if (obj.supports) {\n    css += "@supports (".concat(obj.supports, ") {");\n  }\n  if (obj.media) {\n    css += "@media ".concat(obj.media, " {");\n  }\n  var needLayer = typeof obj.layer !== "undefined";\n  if (needLayer) {\n    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += "}";\n  }\n  if (obj.media) {\n    css += "}";\n  }\n  if (obj.supports) {\n    css += "}";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== "undefined") {\n    css += "\\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === "undefined") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODI1LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EseURBQXlEO0FBQ3pEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanM/ZTQ3OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///825\n')},113:module=>{eval("\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanM/MWRkZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///113\n")},87:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\nvar injectStylesIntoStyleTag = __webpack_require__(72);\nvar injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleDomAPI.js\nvar styleDomAPI = __webpack_require__(825);\nvar styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertBySelector.js\nvar insertBySelector = __webpack_require__(659);\nvar insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\nvar setAttributesWithoutAttributes = __webpack_require__(56);\nvar setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertStyleElement.js\nvar insertStyleElement = __webpack_require__(540);\nvar insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleTagTransform.js\nvar styleTagTransform = __webpack_require__(113);\nvar styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/styles.css\nvar styles = __webpack_require__(365);\n;// ./src/styles.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (styleTagTransform_default());\noptions.setAttributes = (setAttributesWithoutAttributes_default());\noptions.insert = insertBySelector_default().bind(null, "head");\noptions.domAPI = (styleDomAPI_default());\noptions.insertStyleElement = (insertStyleElement_default());\n\nvar update = injectStylesIntoStyleTag_default()(styles/* default */.A, options);\n\n\n\n\n       /* harmony default export */ const src_styles = (styles/* default */.A && styles/* default */.A.locals ? styles/* default */.A.locals : undefined);\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/navbar.css\nvar navbar = __webpack_require__(309);\n;// ./src/navbar.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar navbar_options = {};\n\nnavbar_options.styleTagTransform = (styleTagTransform_default());\nnavbar_options.setAttributes = (setAttributesWithoutAttributes_default());\nnavbar_options.insert = insertBySelector_default().bind(null, "head");\nnavbar_options.domAPI = (styleDomAPI_default());\nnavbar_options.insertStyleElement = (insertStyleElement_default());\n\nvar navbar_update = injectStylesIntoStyleTag_default()(navbar/* default */.A, navbar_options);\n\n\n\n\n       /* harmony default export */ const src_navbar = (navbar/* default */.A && navbar/* default */.A.locals ? navbar/* default */.A.locals : undefined);\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/main.css\nvar main = __webpack_require__(568);\n;// ./src/main.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar main_options = {};\n\nmain_options.styleTagTransform = (styleTagTransform_default());\nmain_options.setAttributes = (setAttributesWithoutAttributes_default());\nmain_options.insert = insertBySelector_default().bind(null, "head");\nmain_options.domAPI = (styleDomAPI_default());\nmain_options.insertStyleElement = (insertStyleElement_default());\n\nvar main_update = injectStylesIntoStyleTag_default()(main/* default */.A, main_options);\n\n\n\n\n       /* harmony default export */ const src_main = (main/* default */.A && main/* default */.A.locals ? main/* default */.A.locals : undefined);\n\n;// ./node_modules/iconify-icon/dist/iconify-icon.mjs\n/**\n* (c) Iconify\n*\n* For the full copyright and license information, please view the license.txt\n* files at https://github.com/iconify/iconify\n*\n* Licensed under MIT.\n*\n* @license MIT\n* @version 2.1.0\n*/\nconst defaultIconDimensions = Object.freeze(\n  {\n    left: 0,\n    top: 0,\n    width: 16,\n    height: 16\n  }\n);\nconst defaultIconTransformations = Object.freeze({\n  rotate: 0,\n  vFlip: false,\n  hFlip: false\n});\nconst defaultIconProps = Object.freeze({\n  ...defaultIconDimensions,\n  ...defaultIconTransformations\n});\nconst defaultExtendedIconProps = Object.freeze({\n  ...defaultIconProps,\n  body: "",\n  hidden: false\n});\n\nconst defaultIconSizeCustomisations = Object.freeze({\n  width: null,\n  height: null\n});\nconst defaultIconCustomisations = Object.freeze({\n  // Dimensions\n  ...defaultIconSizeCustomisations,\n  // Transformations\n  ...defaultIconTransformations\n});\n\nfunction rotateFromString(value, defaultValue = 0) {\n  const units = value.replace(/^-?[0-9.]*/, "");\n  function cleanup(value2) {\n    while (value2 < 0) {\n      value2 += 4;\n    }\n    return value2 % 4;\n  }\n  if (units === "") {\n    const num = parseInt(value);\n    return isNaN(num) ? 0 : cleanup(num);\n  } else if (units !== value) {\n    let split = 0;\n    switch (units) {\n      case "%":\n        split = 25;\n        break;\n      case "deg":\n        split = 90;\n    }\n    if (split) {\n      let num = parseFloat(value.slice(0, value.length - units.length));\n      if (isNaN(num)) {\n        return 0;\n      }\n      num = num / split;\n      return num % 1 === 0 ? cleanup(num) : 0;\n    }\n  }\n  return defaultValue;\n}\n\nconst separator = /[\\s,]+/;\nfunction flipFromString(custom, flip) {\n  flip.split(separator).forEach((str) => {\n    const value = str.trim();\n    switch (value) {\n      case "horizontal":\n        custom.hFlip = true;\n        break;\n      case "vertical":\n        custom.vFlip = true;\n        break;\n    }\n  });\n}\n\nconst defaultCustomisations = {\n    ...defaultIconCustomisations,\n    preserveAspectRatio: \'\',\n};\n/**\n * Get customisations\n */\nfunction getCustomisations(node) {\n    const customisations = {\n        ...defaultCustomisations,\n    };\n    const attr = (key, def) => node.getAttribute(key) || def;\n    // Dimensions\n    customisations.width = attr(\'width\', null);\n    customisations.height = attr(\'height\', null);\n    // Rotation\n    customisations.rotate = rotateFromString(attr(\'rotate\', \'\'));\n    // Flip\n    flipFromString(customisations, attr(\'flip\', \'\'));\n    // SVG attributes\n    customisations.preserveAspectRatio = attr(\'preserveAspectRatio\', attr(\'preserveaspectratio\', \'\'));\n    return customisations;\n}\n/**\n * Check if customisations have been updated\n */\nfunction haveCustomisationsChanged(value1, value2) {\n    for (const key in defaultCustomisations) {\n        if (value1[key] !== value2[key]) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconst matchIconName = /^[a-z0-9]+(-[a-z0-9]+)*$/;\nconst stringToIcon = (value, validate, allowSimpleName, provider = "") => {\n  const colonSeparated = value.split(":");\n  if (value.slice(0, 1) === "@") {\n    if (colonSeparated.length < 2 || colonSeparated.length > 3) {\n      return null;\n    }\n    provider = colonSeparated.shift().slice(1);\n  }\n  if (colonSeparated.length > 3 || !colonSeparated.length) {\n    return null;\n  }\n  if (colonSeparated.length > 1) {\n    const name2 = colonSeparated.pop();\n    const prefix = colonSeparated.pop();\n    const result = {\n      // Allow provider without \'@\': "provider:prefix:name"\n      provider: colonSeparated.length > 0 ? colonSeparated[0] : provider,\n      prefix,\n      name: name2\n    };\n    return validate && !validateIconName(result) ? null : result;\n  }\n  const name = colonSeparated[0];\n  const dashSeparated = name.split("-");\n  if (dashSeparated.length > 1) {\n    const result = {\n      provider,\n      prefix: dashSeparated.shift(),\n      name: dashSeparated.join("-")\n    };\n    return validate && !validateIconName(result) ? null : result;\n  }\n  if (allowSimpleName && provider === "") {\n    const result = {\n      provider,\n      prefix: "",\n      name\n    };\n    return validate && !validateIconName(result, allowSimpleName) ? null : result;\n  }\n  return null;\n};\nconst validateIconName = (icon, allowSimpleName) => {\n  if (!icon) {\n    return false;\n  }\n  return !!((icon.provider === "" || icon.provider.match(matchIconName)) && (allowSimpleName && icon.prefix === "" || icon.prefix.match(matchIconName)) && icon.name.match(matchIconName));\n};\n\nfunction mergeIconTransformations(obj1, obj2) {\n  const result = {};\n  if (!obj1.hFlip !== !obj2.hFlip) {\n    result.hFlip = true;\n  }\n  if (!obj1.vFlip !== !obj2.vFlip) {\n    result.vFlip = true;\n  }\n  const rotate = ((obj1.rotate || 0) + (obj2.rotate || 0)) % 4;\n  if (rotate) {\n    result.rotate = rotate;\n  }\n  return result;\n}\n\nfunction mergeIconData(parent, child) {\n  const result = mergeIconTransformations(parent, child);\n  for (const key in defaultExtendedIconProps) {\n    if (key in defaultIconTransformations) {\n      if (key in parent && !(key in result)) {\n        result[key] = defaultIconTransformations[key];\n      }\n    } else if (key in child) {\n      result[key] = child[key];\n    } else if (key in parent) {\n      result[key] = parent[key];\n    }\n  }\n  return result;\n}\n\nfunction getIconsTree(data, names) {\n  const icons = data.icons;\n  const aliases = data.aliases || /* @__PURE__ */ Object.create(null);\n  const resolved = /* @__PURE__ */ Object.create(null);\n  function resolve(name) {\n    if (icons[name]) {\n      return resolved[name] = [];\n    }\n    if (!(name in resolved)) {\n      resolved[name] = null;\n      const parent = aliases[name] && aliases[name].parent;\n      const value = parent && resolve(parent);\n      if (value) {\n        resolved[name] = [parent].concat(value);\n      }\n    }\n    return resolved[name];\n  }\n  (names || Object.keys(icons).concat(Object.keys(aliases))).forEach(resolve);\n  return resolved;\n}\n\nfunction internalGetIconData(data, name, tree) {\n  const icons = data.icons;\n  const aliases = data.aliases || /* @__PURE__ */ Object.create(null);\n  let currentProps = {};\n  function parse(name2) {\n    currentProps = mergeIconData(\n      icons[name2] || aliases[name2],\n      currentProps\n    );\n  }\n  parse(name);\n  tree.forEach(parse);\n  return mergeIconData(data, currentProps);\n}\n\nfunction parseIconSet(data, callback) {\n  const names = [];\n  if (typeof data !== "object" || typeof data.icons !== "object") {\n    return names;\n  }\n  if (data.not_found instanceof Array) {\n    data.not_found.forEach((name) => {\n      callback(name, null);\n      names.push(name);\n    });\n  }\n  const tree = getIconsTree(data);\n  for (const name in tree) {\n    const item = tree[name];\n    if (item) {\n      callback(name, internalGetIconData(data, name, item));\n      names.push(name);\n    }\n  }\n  return names;\n}\n\nconst optionalPropertyDefaults = {\n  provider: "",\n  aliases: {},\n  not_found: {},\n  ...defaultIconDimensions\n};\nfunction checkOptionalProps(item, defaults) {\n  for (const prop in defaults) {\n    if (prop in item && typeof item[prop] !== typeof defaults[prop]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction quicklyValidateIconSet(obj) {\n  if (typeof obj !== "object" || obj === null) {\n    return null;\n  }\n  const data = obj;\n  if (typeof data.prefix !== "string" || !obj.icons || typeof obj.icons !== "object") {\n    return null;\n  }\n  if (!checkOptionalProps(obj, optionalPropertyDefaults)) {\n    return null;\n  }\n  const icons = data.icons;\n  for (const name in icons) {\n    const icon = icons[name];\n    if (!name.match(matchIconName) || typeof icon.body !== "string" || !checkOptionalProps(\n      icon,\n      defaultExtendedIconProps\n    )) {\n      return null;\n    }\n  }\n  const aliases = data.aliases || /* @__PURE__ */ Object.create(null);\n  for (const name in aliases) {\n    const icon = aliases[name];\n    const parent = icon.parent;\n    if (!name.match(matchIconName) || typeof parent !== "string" || !icons[parent] && !aliases[parent] || !checkOptionalProps(\n      icon,\n      defaultExtendedIconProps\n    )) {\n      return null;\n    }\n  }\n  return data;\n}\n\nconst dataStorage = /* @__PURE__ */ Object.create(null);\nfunction newStorage(provider, prefix) {\n  return {\n    provider,\n    prefix,\n    icons: /* @__PURE__ */ Object.create(null),\n    missing: /* @__PURE__ */ new Set()\n  };\n}\nfunction getStorage(provider, prefix) {\n  const providerStorage = dataStorage[provider] || (dataStorage[provider] = /* @__PURE__ */ Object.create(null));\n  return providerStorage[prefix] || (providerStorage[prefix] = newStorage(provider, prefix));\n}\nfunction addIconSet(storage, data) {\n  if (!quicklyValidateIconSet(data)) {\n    return [];\n  }\n  return parseIconSet(data, (name, icon) => {\n    if (icon) {\n      storage.icons[name] = icon;\n    } else {\n      storage.missing.add(name);\n    }\n  });\n}\nfunction addIconToStorage(storage, name, icon) {\n  try {\n    if (typeof icon.body === "string") {\n      storage.icons[name] = { ...icon };\n      return true;\n    }\n  } catch (err) {\n  }\n  return false;\n}\nfunction listIcons$1(provider, prefix) {\n  let allIcons = [];\n  const providers = typeof provider === "string" ? [provider] : Object.keys(dataStorage);\n  providers.forEach((provider2) => {\n    const prefixes = typeof provider2 === "string" && typeof prefix === "string" ? [prefix] : Object.keys(dataStorage[provider2] || {});\n    prefixes.forEach((prefix2) => {\n      const storage = getStorage(provider2, prefix2);\n      allIcons = allIcons.concat(\n        Object.keys(storage.icons).map(\n          (name) => (provider2 !== "" ? "@" + provider2 + ":" : "") + prefix2 + ":" + name\n        )\n      );\n    });\n  });\n  return allIcons;\n}\n\nlet simpleNames = false;\nfunction allowSimpleNames(allow) {\n  if (typeof allow === "boolean") {\n    simpleNames = allow;\n  }\n  return simpleNames;\n}\nfunction getIconData(name) {\n  const icon = typeof name === "string" ? stringToIcon(name, true, simpleNames) : name;\n  if (icon) {\n    const storage = getStorage(icon.provider, icon.prefix);\n    const iconName = icon.name;\n    return storage.icons[iconName] || (storage.missing.has(iconName) ? null : void 0);\n  }\n}\nfunction addIcon$1(name, data) {\n  const icon = stringToIcon(name, true, simpleNames);\n  if (!icon) {\n    return false;\n  }\n  const storage = getStorage(icon.provider, icon.prefix);\n  return addIconToStorage(storage, icon.name, data);\n}\nfunction addCollection$1(data, provider) {\n  if (typeof data !== "object") {\n    return false;\n  }\n  if (typeof provider !== "string") {\n    provider = data.provider || "";\n  }\n  if (simpleNames && !provider && !data.prefix) {\n    let added = false;\n    if (quicklyValidateIconSet(data)) {\n      data.prefix = "";\n      parseIconSet(data, (name, icon) => {\n        if (icon && addIcon$1(name, icon)) {\n          added = true;\n        }\n      });\n    }\n    return added;\n  }\n  const prefix = data.prefix;\n  if (!validateIconName({\n    provider,\n    prefix,\n    name: "a"\n  })) {\n    return false;\n  }\n  const storage = getStorage(provider, prefix);\n  return !!addIconSet(storage, data);\n}\nfunction iconLoaded$1(name) {\n  return !!getIconData(name);\n}\nfunction getIcon$1(name) {\n  const result = getIconData(name);\n  return result ? {\n    ...defaultIconProps,\n    ...result\n  } : null;\n}\n\nfunction sortIcons(icons) {\n  const result = {\n    loaded: [],\n    missing: [],\n    pending: []\n  };\n  const storage = /* @__PURE__ */ Object.create(null);\n  icons.sort((a, b) => {\n    if (a.provider !== b.provider) {\n      return a.provider.localeCompare(b.provider);\n    }\n    if (a.prefix !== b.prefix) {\n      return a.prefix.localeCompare(b.prefix);\n    }\n    return a.name.localeCompare(b.name);\n  });\n  let lastIcon = {\n    provider: "",\n    prefix: "",\n    name: ""\n  };\n  icons.forEach((icon) => {\n    if (lastIcon.name === icon.name && lastIcon.prefix === icon.prefix && lastIcon.provider === icon.provider) {\n      return;\n    }\n    lastIcon = icon;\n    const provider = icon.provider;\n    const prefix = icon.prefix;\n    const name = icon.name;\n    const providerStorage = storage[provider] || (storage[provider] = /* @__PURE__ */ Object.create(null));\n    const localStorage = providerStorage[prefix] || (providerStorage[prefix] = getStorage(provider, prefix));\n    let list;\n    if (name in localStorage.icons) {\n      list = result.loaded;\n    } else if (prefix === "" || localStorage.missing.has(name)) {\n      list = result.missing;\n    } else {\n      list = result.pending;\n    }\n    const item = {\n      provider,\n      prefix,\n      name\n    };\n    list.push(item);\n  });\n  return result;\n}\n\nfunction removeCallback(storages, id) {\n  storages.forEach((storage) => {\n    const items = storage.loaderCallbacks;\n    if (items) {\n      storage.loaderCallbacks = items.filter((row) => row.id !== id);\n    }\n  });\n}\nfunction updateCallbacks(storage) {\n  if (!storage.pendingCallbacksFlag) {\n    storage.pendingCallbacksFlag = true;\n    setTimeout(() => {\n      storage.pendingCallbacksFlag = false;\n      const items = storage.loaderCallbacks ? storage.loaderCallbacks.slice(0) : [];\n      if (!items.length) {\n        return;\n      }\n      let hasPending = false;\n      const provider = storage.provider;\n      const prefix = storage.prefix;\n      items.forEach((item) => {\n        const icons = item.icons;\n        const oldLength = icons.pending.length;\n        icons.pending = icons.pending.filter((icon) => {\n          if (icon.prefix !== prefix) {\n            return true;\n          }\n          const name = icon.name;\n          if (storage.icons[name]) {\n            icons.loaded.push({\n              provider,\n              prefix,\n              name\n            });\n          } else if (storage.missing.has(name)) {\n            icons.missing.push({\n              provider,\n              prefix,\n              name\n            });\n          } else {\n            hasPending = true;\n            return true;\n          }\n          return false;\n        });\n        if (icons.pending.length !== oldLength) {\n          if (!hasPending) {\n            removeCallback([storage], item.id);\n          }\n          item.callback(\n            icons.loaded.slice(0),\n            icons.missing.slice(0),\n            icons.pending.slice(0),\n            item.abort\n          );\n        }\n      });\n    });\n  }\n}\nlet idCounter = 0;\nfunction storeCallback(callback, icons, pendingSources) {\n  const id = idCounter++;\n  const abort = removeCallback.bind(null, pendingSources, id);\n  if (!icons.pending.length) {\n    return abort;\n  }\n  const item = {\n    id,\n    icons,\n    callback,\n    abort\n  };\n  pendingSources.forEach((storage) => {\n    (storage.loaderCallbacks || (storage.loaderCallbacks = [])).push(item);\n  });\n  return abort;\n}\n\nconst storage = /* @__PURE__ */ Object.create(null);\nfunction setAPIModule(provider, item) {\n  storage[provider] = item;\n}\nfunction getAPIModule(provider) {\n  return storage[provider] || storage[""];\n}\n\nfunction listToIcons(list, validate = true, simpleNames = false) {\n  const result = [];\n  list.forEach((item) => {\n    const icon = typeof item === "string" ? stringToIcon(item, validate, simpleNames) : item;\n    if (icon) {\n      result.push(icon);\n    }\n  });\n  return result;\n}\n\n// src/config.ts\nvar defaultConfig = {\n  resources: [],\n  index: 0,\n  timeout: 2e3,\n  rotate: 750,\n  random: false,\n  dataAfterTimeout: false\n};\n\n// src/query.ts\nfunction sendQuery(config, payload, query, done) {\n  const resourcesCount = config.resources.length;\n  const startIndex = config.random ? Math.floor(Math.random() * resourcesCount) : config.index;\n  let resources;\n  if (config.random) {\n    let list = config.resources.slice(0);\n    resources = [];\n    while (list.length > 1) {\n      const nextIndex = Math.floor(Math.random() * list.length);\n      resources.push(list[nextIndex]);\n      list = list.slice(0, nextIndex).concat(list.slice(nextIndex + 1));\n    }\n    resources = resources.concat(list);\n  } else {\n    resources = config.resources.slice(startIndex).concat(config.resources.slice(0, startIndex));\n  }\n  const startTime = Date.now();\n  let status = "pending";\n  let queriesSent = 0;\n  let lastError;\n  let timer = null;\n  let queue = [];\n  let doneCallbacks = [];\n  if (typeof done === "function") {\n    doneCallbacks.push(done);\n  }\n  function resetTimer() {\n    if (timer) {\n      clearTimeout(timer);\n      timer = null;\n    }\n  }\n  function abort() {\n    if (status === "pending") {\n      status = "aborted";\n    }\n    resetTimer();\n    queue.forEach((item) => {\n      if (item.status === "pending") {\n        item.status = "aborted";\n      }\n    });\n    queue = [];\n  }\n  function subscribe(callback, overwrite) {\n    if (overwrite) {\n      doneCallbacks = [];\n    }\n    if (typeof callback === "function") {\n      doneCallbacks.push(callback);\n    }\n  }\n  function getQueryStatus() {\n    return {\n      startTime,\n      payload,\n      status,\n      queriesSent,\n      queriesPending: queue.length,\n      subscribe,\n      abort\n    };\n  }\n  function failQuery() {\n    status = "failed";\n    doneCallbacks.forEach((callback) => {\n      callback(void 0, lastError);\n    });\n  }\n  function clearQueue() {\n    queue.forEach((item) => {\n      if (item.status === "pending") {\n        item.status = "aborted";\n      }\n    });\n    queue = [];\n  }\n  function moduleResponse(item, response, data) {\n    const isError = response !== "success";\n    queue = queue.filter((queued) => queued !== item);\n    switch (status) {\n      case "pending":\n        break;\n      case "failed":\n        if (isError || !config.dataAfterTimeout) {\n          return;\n        }\n        break;\n      default:\n        return;\n    }\n    if (response === "abort") {\n      lastError = data;\n      failQuery();\n      return;\n    }\n    if (isError) {\n      lastError = data;\n      if (!queue.length) {\n        if (!resources.length) {\n          failQuery();\n        } else {\n          execNext();\n        }\n      }\n      return;\n    }\n    resetTimer();\n    clearQueue();\n    if (!config.random) {\n      const index = config.resources.indexOf(item.resource);\n      if (index !== -1 && index !== config.index) {\n        config.index = index;\n      }\n    }\n    status = "completed";\n    doneCallbacks.forEach((callback) => {\n      callback(data);\n    });\n  }\n  function execNext() {\n    if (status !== "pending") {\n      return;\n    }\n    resetTimer();\n    const resource = resources.shift();\n    if (resource === void 0) {\n      if (queue.length) {\n        timer = setTimeout(() => {\n          resetTimer();\n          if (status === "pending") {\n            clearQueue();\n            failQuery();\n          }\n        }, config.timeout);\n        return;\n      }\n      failQuery();\n      return;\n    }\n    const item = {\n      status: "pending",\n      resource,\n      callback: (status2, data) => {\n        moduleResponse(item, status2, data);\n      }\n    };\n    queue.push(item);\n    queriesSent++;\n    timer = setTimeout(execNext, config.rotate);\n    query(resource, payload, item.callback);\n  }\n  setTimeout(execNext);\n  return getQueryStatus;\n}\n\n// src/index.ts\nfunction initRedundancy(cfg) {\n  const config = {\n    ...defaultConfig,\n    ...cfg\n  };\n  let queries = [];\n  function cleanup() {\n    queries = queries.filter((item) => item().status === "pending");\n  }\n  function query(payload, queryCallback, doneCallback) {\n    const query2 = sendQuery(\n      config,\n      payload,\n      queryCallback,\n      (data, error) => {\n        cleanup();\n        if (doneCallback) {\n          doneCallback(data, error);\n        }\n      }\n    );\n    queries.push(query2);\n    return query2;\n  }\n  function find(callback) {\n    return queries.find((value) => {\n      return callback(value);\n    }) || null;\n  }\n  const instance = {\n    query,\n    find,\n    setIndex: (index) => {\n      config.index = index;\n    },\n    getIndex: () => config.index,\n    cleanup\n  };\n  return instance;\n}\n\nfunction createAPIConfig(source) {\n  let resources;\n  if (typeof source.resources === "string") {\n    resources = [source.resources];\n  } else {\n    resources = source.resources;\n    if (!(resources instanceof Array) || !resources.length) {\n      return null;\n    }\n  }\n  const result = {\n    // API hosts\n    resources,\n    // Root path\n    path: source.path || "/",\n    // URL length limit\n    maxURL: source.maxURL || 500,\n    // Timeout before next host is used.\n    rotate: source.rotate || 750,\n    // Timeout before failing query.\n    timeout: source.timeout || 5e3,\n    // Randomise default API end point.\n    random: source.random === true,\n    // Start index\n    index: source.index || 0,\n    // Receive data after time out (used if time out kicks in first, then API module sends data anyway).\n    dataAfterTimeout: source.dataAfterTimeout !== false\n  };\n  return result;\n}\nconst configStorage = /* @__PURE__ */ Object.create(null);\nconst fallBackAPISources = [\n  "https://api.simplesvg.com",\n  "https://api.unisvg.com"\n];\nconst fallBackAPI = [];\nwhile (fallBackAPISources.length > 0) {\n  if (fallBackAPISources.length === 1) {\n    fallBackAPI.push(fallBackAPISources.shift());\n  } else {\n    if (Math.random() > 0.5) {\n      fallBackAPI.push(fallBackAPISources.shift());\n    } else {\n      fallBackAPI.push(fallBackAPISources.pop());\n    }\n  }\n}\nconfigStorage[""] = createAPIConfig({\n  resources: ["https://api.iconify.design"].concat(fallBackAPI)\n});\nfunction addAPIProvider$1(provider, customConfig) {\n  const config = createAPIConfig(customConfig);\n  if (config === null) {\n    return false;\n  }\n  configStorage[provider] = config;\n  return true;\n}\nfunction getAPIConfig(provider) {\n  return configStorage[provider];\n}\nfunction listAPIProviders() {\n  return Object.keys(configStorage);\n}\n\nfunction emptyCallback$1() {\n}\nconst redundancyCache = /* @__PURE__ */ Object.create(null);\nfunction getRedundancyCache(provider) {\n  if (!redundancyCache[provider]) {\n    const config = getAPIConfig(provider);\n    if (!config) {\n      return;\n    }\n    const redundancy = initRedundancy(config);\n    const cachedReundancy = {\n      config,\n      redundancy\n    };\n    redundancyCache[provider] = cachedReundancy;\n  }\n  return redundancyCache[provider];\n}\nfunction sendAPIQuery(target, query, callback) {\n  let redundancy;\n  let send;\n  if (typeof target === "string") {\n    const api = getAPIModule(target);\n    if (!api) {\n      callback(void 0, 424);\n      return emptyCallback$1;\n    }\n    send = api.send;\n    const cached = getRedundancyCache(target);\n    if (cached) {\n      redundancy = cached.redundancy;\n    }\n  } else {\n    const config = createAPIConfig(target);\n    if (config) {\n      redundancy = initRedundancy(config);\n      const moduleKey = target.resources ? target.resources[0] : "";\n      const api = getAPIModule(moduleKey);\n      if (api) {\n        send = api.send;\n      }\n    }\n  }\n  if (!redundancy || !send) {\n    callback(void 0, 424);\n    return emptyCallback$1;\n  }\n  return redundancy.query(query, send, callback)().abort;\n}\n\nconst browserCacheVersion = "iconify2";\nconst browserCachePrefix = "iconify";\nconst browserCacheCountKey = browserCachePrefix + "-count";\nconst browserCacheVersionKey = browserCachePrefix + "-version";\nconst browserStorageHour = 36e5;\nconst browserStorageCacheExpiration = 168;\nconst browserStorageLimit = 50;\n\nfunction getStoredItem(func, key) {\n  try {\n    return func.getItem(key);\n  } catch (err) {\n  }\n}\nfunction setStoredItem(func, key, value) {\n  try {\n    func.setItem(key, value);\n    return true;\n  } catch (err) {\n  }\n}\nfunction removeStoredItem(func, key) {\n  try {\n    func.removeItem(key);\n  } catch (err) {\n  }\n}\n\nfunction setBrowserStorageItemsCount(storage, value) {\n  return setStoredItem(storage, browserCacheCountKey, value.toString());\n}\nfunction getBrowserStorageItemsCount(storage) {\n  return parseInt(getStoredItem(storage, browserCacheCountKey)) || 0;\n}\n\nconst browserStorageConfig = {\n  local: true,\n  session: true\n};\nconst browserStorageEmptyItems = {\n  local: /* @__PURE__ */ new Set(),\n  session: /* @__PURE__ */ new Set()\n};\nlet browserStorageStatus = false;\nfunction setBrowserStorageStatus(status) {\n  browserStorageStatus = status;\n}\n\nlet _window = typeof window === "undefined" ? {} : window;\nfunction getBrowserStorage(key) {\n  const attr = key + "Storage";\n  try {\n    if (_window && _window[attr] && typeof _window[attr].length === "number") {\n      return _window[attr];\n    }\n  } catch (err) {\n  }\n  browserStorageConfig[key] = false;\n}\n\nfunction iterateBrowserStorage(key, callback) {\n  const func = getBrowserStorage(key);\n  if (!func) {\n    return;\n  }\n  const version = getStoredItem(func, browserCacheVersionKey);\n  if (version !== browserCacheVersion) {\n    if (version) {\n      const total2 = getBrowserStorageItemsCount(func);\n      for (let i = 0; i < total2; i++) {\n        removeStoredItem(func, browserCachePrefix + i.toString());\n      }\n    }\n    setStoredItem(func, browserCacheVersionKey, browserCacheVersion);\n    setBrowserStorageItemsCount(func, 0);\n    return;\n  }\n  const minTime = Math.floor(Date.now() / browserStorageHour) - browserStorageCacheExpiration;\n  const parseItem = (index) => {\n    const name = browserCachePrefix + index.toString();\n    const item = getStoredItem(func, name);\n    if (typeof item !== "string") {\n      return;\n    }\n    try {\n      const data = JSON.parse(item);\n      if (typeof data === "object" && typeof data.cached === "number" && data.cached > minTime && typeof data.provider === "string" && typeof data.data === "object" && typeof data.data.prefix === "string" && // Valid item: run callback\n      callback(data, index)) {\n        return true;\n      }\n    } catch (err) {\n    }\n    removeStoredItem(func, name);\n  };\n  let total = getBrowserStorageItemsCount(func);\n  for (let i = total - 1; i >= 0; i--) {\n    if (!parseItem(i)) {\n      if (i === total - 1) {\n        total--;\n        setBrowserStorageItemsCount(func, total);\n      } else {\n        browserStorageEmptyItems[key].add(i);\n      }\n    }\n  }\n}\n\nfunction initBrowserStorage() {\n  if (browserStorageStatus) {\n    return;\n  }\n  setBrowserStorageStatus(true);\n  for (const key in browserStorageConfig) {\n    iterateBrowserStorage(key, (item) => {\n      const iconSet = item.data;\n      const provider = item.provider;\n      const prefix = iconSet.prefix;\n      const storage = getStorage(\n        provider,\n        prefix\n      );\n      if (!addIconSet(storage, iconSet).length) {\n        return false;\n      }\n      const lastModified = iconSet.lastModified || -1;\n      storage.lastModifiedCached = storage.lastModifiedCached ? Math.min(storage.lastModifiedCached, lastModified) : lastModified;\n      return true;\n    });\n  }\n}\n\nfunction updateLastModified(storage, lastModified) {\n  const lastValue = storage.lastModifiedCached;\n  if (\n    // Matches or newer\n    lastValue && lastValue >= lastModified\n  ) {\n    return lastValue === lastModified;\n  }\n  storage.lastModifiedCached = lastModified;\n  if (lastValue) {\n    for (const key in browserStorageConfig) {\n      iterateBrowserStorage(key, (item) => {\n        const iconSet = item.data;\n        return item.provider !== storage.provider || iconSet.prefix !== storage.prefix || iconSet.lastModified === lastModified;\n      });\n    }\n  }\n  return true;\n}\nfunction storeInBrowserStorage(storage, data) {\n  if (!browserStorageStatus) {\n    initBrowserStorage();\n  }\n  function store(key) {\n    let func;\n    if (!browserStorageConfig[key] || !(func = getBrowserStorage(key))) {\n      return;\n    }\n    const set = browserStorageEmptyItems[key];\n    let index;\n    if (set.size) {\n      set.delete(index = Array.from(set).shift());\n    } else {\n      index = getBrowserStorageItemsCount(func);\n      if (index >= browserStorageLimit || !setBrowserStorageItemsCount(func, index + 1)) {\n        return;\n      }\n    }\n    const item = {\n      cached: Math.floor(Date.now() / browserStorageHour),\n      provider: storage.provider,\n      data\n    };\n    return setStoredItem(\n      func,\n      browserCachePrefix + index.toString(),\n      JSON.stringify(item)\n    );\n  }\n  if (data.lastModified && !updateLastModified(storage, data.lastModified)) {\n    return;\n  }\n  if (!Object.keys(data.icons).length) {\n    return;\n  }\n  if (data.not_found) {\n    data = Object.assign({}, data);\n    delete data.not_found;\n  }\n  if (!store("local")) {\n    store("session");\n  }\n}\n\nfunction emptyCallback() {\n}\nfunction loadedNewIcons(storage) {\n  if (!storage.iconsLoaderFlag) {\n    storage.iconsLoaderFlag = true;\n    setTimeout(() => {\n      storage.iconsLoaderFlag = false;\n      updateCallbacks(storage);\n    });\n  }\n}\nfunction loadNewIcons(storage, icons) {\n  if (!storage.iconsToLoad) {\n    storage.iconsToLoad = icons;\n  } else {\n    storage.iconsToLoad = storage.iconsToLoad.concat(icons).sort();\n  }\n  if (!storage.iconsQueueFlag) {\n    storage.iconsQueueFlag = true;\n    setTimeout(() => {\n      storage.iconsQueueFlag = false;\n      const { provider, prefix } = storage;\n      const icons2 = storage.iconsToLoad;\n      delete storage.iconsToLoad;\n      let api;\n      if (!icons2 || !(api = getAPIModule(provider))) {\n        return;\n      }\n      const params = api.prepare(provider, prefix, icons2);\n      params.forEach((item) => {\n        sendAPIQuery(provider, item, (data) => {\n          if (typeof data !== "object") {\n            item.icons.forEach((name) => {\n              storage.missing.add(name);\n            });\n          } else {\n            try {\n              const parsed = addIconSet(\n                storage,\n                data\n              );\n              if (!parsed.length) {\n                return;\n              }\n              const pending = storage.pendingIcons;\n              if (pending) {\n                parsed.forEach((name) => {\n                  pending.delete(name);\n                });\n              }\n              storeInBrowserStorage(storage, data);\n            } catch (err) {\n              console.error(err);\n            }\n          }\n          loadedNewIcons(storage);\n        });\n      });\n    });\n  }\n}\nconst loadIcons$1 = (icons, callback) => {\n  const cleanedIcons = listToIcons(icons, true, allowSimpleNames());\n  const sortedIcons = sortIcons(cleanedIcons);\n  if (!sortedIcons.pending.length) {\n    let callCallback = true;\n    if (callback) {\n      setTimeout(() => {\n        if (callCallback) {\n          callback(\n            sortedIcons.loaded,\n            sortedIcons.missing,\n            sortedIcons.pending,\n            emptyCallback\n          );\n        }\n      });\n    }\n    return () => {\n      callCallback = false;\n    };\n  }\n  const newIcons = /* @__PURE__ */ Object.create(null);\n  const sources = [];\n  let lastProvider, lastPrefix;\n  sortedIcons.pending.forEach((icon) => {\n    const { provider, prefix } = icon;\n    if (prefix === lastPrefix && provider === lastProvider) {\n      return;\n    }\n    lastProvider = provider;\n    lastPrefix = prefix;\n    sources.push(getStorage(provider, prefix));\n    const providerNewIcons = newIcons[provider] || (newIcons[provider] = /* @__PURE__ */ Object.create(null));\n    if (!providerNewIcons[prefix]) {\n      providerNewIcons[prefix] = [];\n    }\n  });\n  sortedIcons.pending.forEach((icon) => {\n    const { provider, prefix, name } = icon;\n    const storage = getStorage(provider, prefix);\n    const pendingQueue = storage.pendingIcons || (storage.pendingIcons = /* @__PURE__ */ new Set());\n    if (!pendingQueue.has(name)) {\n      pendingQueue.add(name);\n      newIcons[provider][prefix].push(name);\n    }\n  });\n  sources.forEach((storage) => {\n    const { provider, prefix } = storage;\n    if (newIcons[provider][prefix].length) {\n      loadNewIcons(storage, newIcons[provider][prefix]);\n    }\n  });\n  return callback ? storeCallback(callback, sortedIcons, sources) : emptyCallback;\n};\nconst loadIcon$1 = (icon) => {\n  return new Promise((fulfill, reject) => {\n    const iconObj = typeof icon === "string" ? stringToIcon(icon, true) : icon;\n    if (!iconObj) {\n      reject(icon);\n      return;\n    }\n    loadIcons$1([iconObj || icon], (loaded) => {\n      if (loaded.length && iconObj) {\n        const data = getIconData(iconObj);\n        if (data) {\n          fulfill({\n            ...defaultIconProps,\n            ...data\n          });\n          return;\n        }\n      }\n      reject(icon);\n    });\n  });\n};\n\n/**\n * Test icon string\n */\nfunction testIconObject(value) {\n    try {\n        const obj = typeof value === \'string\' ? JSON.parse(value) : value;\n        if (typeof obj.body === \'string\') {\n            return {\n                ...obj,\n            };\n        }\n    }\n    catch (err) {\n        //\n    }\n}\n\n/**\n * Parse icon value, load if needed\n */\nfunction parseIconValue(value, onload) {\n    // Check if icon name is valid\n    const name = typeof value === \'string\' ? stringToIcon(value, true, true) : null;\n    if (!name) {\n        // Test for serialised object\n        const data = testIconObject(value);\n        return {\n            value,\n            data,\n        };\n    }\n    // Valid icon name: check if data is available\n    const data = getIconData(name);\n    // Icon data exists or icon has no prefix. Do not load icon from API if icon has no prefix\n    if (data !== void 0 || !name.prefix) {\n        return {\n            value,\n            name,\n            data, // could be \'null\' -> icon is missing\n        };\n    }\n    // Load icon\n    const loading = loadIcons$1([name], () => onload(value, name, getIconData(name)));\n    return {\n        value,\n        name,\n        loading,\n    };\n}\n\n// Check for Safari\nlet isBuggedSafari = false;\ntry {\n    isBuggedSafari = navigator.vendor.indexOf(\'Apple\') === 0;\n}\ncatch (err) {\n    //\n}\n/**\n * Get render mode\n */\nfunction getRenderMode(body, mode) {\n    switch (mode) {\n        // Force mode\n        case \'svg\':\n        case \'bg\':\n        case \'mask\':\n            return mode;\n    }\n    // Check for animation, use \'style\' for animated icons, unless browser is Safari\n    // (only <a>, which should be ignored or animations start with \'<a\')\n    if (mode !== \'style\' &&\n        (isBuggedSafari || body.indexOf(\'<a\') === -1)) {\n        // Render <svg>\n        return \'svg\';\n    }\n    // Use background or mask\n    return body.indexOf(\'currentColor\') === -1 ? \'bg\' : \'mask\';\n}\n\nconst unitsSplit = /(-?[0-9.]*[0-9]+[0-9.]*)/g;\nconst unitsTest = /^-?[0-9.]*[0-9]+[0-9.]*$/g;\nfunction calculateSize$1(size, ratio, precision) {\n  if (ratio === 1) {\n    return size;\n  }\n  precision = precision || 100;\n  if (typeof size === "number") {\n    return Math.ceil(size * ratio * precision) / precision;\n  }\n  if (typeof size !== "string") {\n    return size;\n  }\n  const oldParts = size.split(unitsSplit);\n  if (oldParts === null || !oldParts.length) {\n    return size;\n  }\n  const newParts = [];\n  let code = oldParts.shift();\n  let isNumber = unitsTest.test(code);\n  while (true) {\n    if (isNumber) {\n      const num = parseFloat(code);\n      if (isNaN(num)) {\n        newParts.push(code);\n      } else {\n        newParts.push(Math.ceil(num * ratio * precision) / precision);\n      }\n    } else {\n      newParts.push(code);\n    }\n    code = oldParts.shift();\n    if (code === void 0) {\n      return newParts.join("");\n    }\n    isNumber = !isNumber;\n  }\n}\n\nfunction splitSVGDefs(content, tag = "defs") {\n  let defs = "";\n  const index = content.indexOf("<" + tag);\n  while (index >= 0) {\n    const start = content.indexOf(">", index);\n    const end = content.indexOf("</" + tag);\n    if (start === -1 || end === -1) {\n      break;\n    }\n    const endEnd = content.indexOf(">", end);\n    if (endEnd === -1) {\n      break;\n    }\n    defs += content.slice(start + 1, end).trim();\n    content = content.slice(0, index).trim() + content.slice(endEnd + 1);\n  }\n  return {\n    defs,\n    content\n  };\n}\nfunction mergeDefsAndContent(defs, content) {\n  return defs ? "<defs>" + defs + "</defs>" + content : content;\n}\nfunction wrapSVGContent(body, start, end) {\n  const split = splitSVGDefs(body);\n  return mergeDefsAndContent(split.defs, start + split.content + end);\n}\n\nconst isUnsetKeyword = (value) => value === "unset" || value === "undefined" || value === "none";\nfunction iconToSVG(icon, customisations) {\n  const fullIcon = {\n    ...defaultIconProps,\n    ...icon\n  };\n  const fullCustomisations = {\n    ...defaultIconCustomisations,\n    ...customisations\n  };\n  const box = {\n    left: fullIcon.left,\n    top: fullIcon.top,\n    width: fullIcon.width,\n    height: fullIcon.height\n  };\n  let body = fullIcon.body;\n  [fullIcon, fullCustomisations].forEach((props) => {\n    const transformations = [];\n    const hFlip = props.hFlip;\n    const vFlip = props.vFlip;\n    let rotation = props.rotate;\n    if (hFlip) {\n      if (vFlip) {\n        rotation += 2;\n      } else {\n        transformations.push(\n          "translate(" + (box.width + box.left).toString() + " " + (0 - box.top).toString() + ")"\n        );\n        transformations.push("scale(-1 1)");\n        box.top = box.left = 0;\n      }\n    } else if (vFlip) {\n      transformations.push(\n        "translate(" + (0 - box.left).toString() + " " + (box.height + box.top).toString() + ")"\n      );\n      transformations.push("scale(1 -1)");\n      box.top = box.left = 0;\n    }\n    let tempValue;\n    if (rotation < 0) {\n      rotation -= Math.floor(rotation / 4) * 4;\n    }\n    rotation = rotation % 4;\n    switch (rotation) {\n      case 1:\n        tempValue = box.height / 2 + box.top;\n        transformations.unshift(\n          "rotate(90 " + tempValue.toString() + " " + tempValue.toString() + ")"\n        );\n        break;\n      case 2:\n        transformations.unshift(\n          "rotate(180 " + (box.width / 2 + box.left).toString() + " " + (box.height / 2 + box.top).toString() + ")"\n        );\n        break;\n      case 3:\n        tempValue = box.width / 2 + box.left;\n        transformations.unshift(\n          "rotate(-90 " + tempValue.toString() + " " + tempValue.toString() + ")"\n        );\n        break;\n    }\n    if (rotation % 2 === 1) {\n      if (box.left !== box.top) {\n        tempValue = box.left;\n        box.left = box.top;\n        box.top = tempValue;\n      }\n      if (box.width !== box.height) {\n        tempValue = box.width;\n        box.width = box.height;\n        box.height = tempValue;\n      }\n    }\n    if (transformations.length) {\n      body = wrapSVGContent(\n        body,\n        \'<g transform="\' + transformations.join(" ") + \'">\',\n        "</g>"\n      );\n    }\n  });\n  const customisationsWidth = fullCustomisations.width;\n  const customisationsHeight = fullCustomisations.height;\n  const boxWidth = box.width;\n  const boxHeight = box.height;\n  let width;\n  let height;\n  if (customisationsWidth === null) {\n    height = customisationsHeight === null ? "1em" : customisationsHeight === "auto" ? boxHeight : customisationsHeight;\n    width = calculateSize$1(height, boxWidth / boxHeight);\n  } else {\n    width = customisationsWidth === "auto" ? boxWidth : customisationsWidth;\n    height = customisationsHeight === null ? calculateSize$1(width, boxHeight / boxWidth) : customisationsHeight === "auto" ? boxHeight : customisationsHeight;\n  }\n  const attributes = {};\n  const setAttr = (prop, value) => {\n    if (!isUnsetKeyword(value)) {\n      attributes[prop] = value.toString();\n    }\n  };\n  setAttr("width", width);\n  setAttr("height", height);\n  const viewBox = [box.left, box.top, boxWidth, boxHeight];\n  attributes.viewBox = viewBox.join(" ");\n  return {\n    attributes,\n    viewBox,\n    body\n  };\n}\n\nfunction iconToHTML$1(body, attributes) {\n  let renderAttribsHTML = body.indexOf("xlink:") === -1 ? "" : \' xmlns:xlink="http://www.w3.org/1999/xlink"\';\n  for (const attr in attributes) {\n    renderAttribsHTML += " " + attr + \'="\' + attributes[attr] + \'"\';\n  }\n  return \'<svg xmlns="http://www.w3.org/2000/svg"\' + renderAttribsHTML + ">" + body + "</svg>";\n}\n\nfunction encodeSVGforURL(svg) {\n  return svg.replace(/"/g, "\'").replace(/%/g, "%25").replace(/#/g, "%23").replace(/</g, "%3C").replace(/>/g, "%3E").replace(/\\s+/g, " ");\n}\nfunction svgToData(svg) {\n  return "data:image/svg+xml," + encodeSVGforURL(svg);\n}\nfunction svgToURL$1(svg) {\n  return \'url("\' + svgToData(svg) + \'")\';\n}\n\nconst detectFetch = () => {\n  let callback;\n  try {\n    callback = fetch;\n    if (typeof callback === "function") {\n      return callback;\n    }\n  } catch (err) {\n  }\n};\nlet fetchModule = detectFetch();\nfunction setFetch(fetch2) {\n  fetchModule = fetch2;\n}\nfunction getFetch() {\n  return fetchModule;\n}\nfunction calculateMaxLength(provider, prefix) {\n  const config = getAPIConfig(provider);\n  if (!config) {\n    return 0;\n  }\n  let result;\n  if (!config.maxURL) {\n    result = 0;\n  } else {\n    let maxHostLength = 0;\n    config.resources.forEach((item) => {\n      const host = item;\n      maxHostLength = Math.max(maxHostLength, host.length);\n    });\n    const url = prefix + ".json?icons=";\n    result = config.maxURL - maxHostLength - config.path.length - url.length;\n  }\n  return result;\n}\nfunction shouldAbort(status) {\n  return status === 404;\n}\nconst prepare = (provider, prefix, icons) => {\n  const results = [];\n  const maxLength = calculateMaxLength(provider, prefix);\n  const type = "icons";\n  let item = {\n    type,\n    provider,\n    prefix,\n    icons: []\n  };\n  let length = 0;\n  icons.forEach((name, index) => {\n    length += name.length + 1;\n    if (length >= maxLength && index > 0) {\n      results.push(item);\n      item = {\n        type,\n        provider,\n        prefix,\n        icons: []\n      };\n      length = name.length;\n    }\n    item.icons.push(name);\n  });\n  results.push(item);\n  return results;\n};\nfunction getPath(provider) {\n  if (typeof provider === "string") {\n    const config = getAPIConfig(provider);\n    if (config) {\n      return config.path;\n    }\n  }\n  return "/";\n}\nconst send = (host, params, callback) => {\n  if (!fetchModule) {\n    callback("abort", 424);\n    return;\n  }\n  let path = getPath(params.provider);\n  switch (params.type) {\n    case "icons": {\n      const prefix = params.prefix;\n      const icons = params.icons;\n      const iconsList = icons.join(",");\n      const urlParams = new URLSearchParams({\n        icons: iconsList\n      });\n      path += prefix + ".json?" + urlParams.toString();\n      break;\n    }\n    case "custom": {\n      const uri = params.uri;\n      path += uri.slice(0, 1) === "/" ? uri.slice(1) : uri;\n      break;\n    }\n    default:\n      callback("abort", 400);\n      return;\n  }\n  let defaultError = 503;\n  fetchModule(host + path).then((response) => {\n    const status = response.status;\n    if (status !== 200) {\n      setTimeout(() => {\n        callback(shouldAbort(status) ? "abort" : "next", status);\n      });\n      return;\n    }\n    defaultError = 501;\n    return response.json();\n  }).then((data) => {\n    if (typeof data !== "object" || data === null) {\n      setTimeout(() => {\n        if (data === 404) {\n          callback("abort", data);\n        } else {\n          callback("next", defaultError);\n        }\n      });\n      return;\n    }\n    setTimeout(() => {\n      callback("success", data);\n    });\n  }).catch(() => {\n    callback("next", defaultError);\n  });\n};\nconst fetchAPIModule = {\n  prepare,\n  send\n};\n\nfunction toggleBrowserCache(storage, value) {\n  switch (storage) {\n    case "local":\n    case "session":\n      browserStorageConfig[storage] = value;\n      break;\n    case "all":\n      for (const key in browserStorageConfig) {\n        browserStorageConfig[key] = value;\n      }\n      break;\n  }\n}\n\n/**\n * Attribute to add\n */\nconst nodeAttr = \'data-style\';\n/**\n * Custom style to add to each node\n */\nlet customStyle = \'\';\n/**\n * Set custom style to add to all components\n *\n * Affects only components rendered after function call\n */\nfunction appendCustomStyle(style) {\n    customStyle = style;\n}\n/**\n * Add/update style node\n */\nfunction updateStyle(parent, inline) {\n    // Get node, create if needed\n    let styleNode = Array.from(parent.childNodes).find((node) => node.hasAttribute &&\n        node.hasAttribute(nodeAttr));\n    if (!styleNode) {\n        styleNode = document.createElement(\'style\');\n        styleNode.setAttribute(nodeAttr, nodeAttr);\n        parent.appendChild(styleNode);\n    }\n    // Update content\n    styleNode.textContent =\n        \':host{display:inline-block;vertical-align:\' +\n            (inline ? \'-0.125em\' : \'0\') +\n            \'}span,svg{display:block}\' +\n            customStyle;\n}\n\n// Core\n/**\n * Get functions and initialise stuff\n */\nfunction exportFunctions() {\n    /**\n     * Initialise stuff\n     */\n    // Set API module\n    setAPIModule(\'\', fetchAPIModule);\n    // Allow simple icon names\n    allowSimpleNames(true);\n    let _window;\n    try {\n        _window = window;\n    }\n    catch (err) {\n        //\n    }\n    if (_window) {\n        // Set cache and load existing cache\n        initBrowserStorage();\n        // Load icons from global "IconifyPreload"\n        if (_window.IconifyPreload !== void 0) {\n            const preload = _window.IconifyPreload;\n            const err = \'Invalid IconifyPreload syntax.\';\n            if (typeof preload === \'object\' && preload !== null) {\n                (preload instanceof Array ? preload : [preload]).forEach((item) => {\n                    try {\n                        if (\n                        // Check if item is an object and not null/array\n                        typeof item !== \'object\' ||\n                            item === null ||\n                            item instanceof Array ||\n                            // Check for \'icons\' and \'prefix\'\n                            typeof item.icons !== \'object\' ||\n                            typeof item.prefix !== \'string\' ||\n                            // Add icon set\n                            !addCollection$1(item)) {\n                            console.error(err);\n                        }\n                    }\n                    catch (e) {\n                        console.error(err);\n                    }\n                });\n            }\n        }\n        // Set API from global "IconifyProviders"\n        if (_window.IconifyProviders !== void 0) {\n            const providers = _window.IconifyProviders;\n            if (typeof providers === \'object\' && providers !== null) {\n                for (const key in providers) {\n                    const err = \'IconifyProviders[\' + key + \'] is invalid.\';\n                    try {\n                        const value = providers[key];\n                        if (typeof value !== \'object\' ||\n                            !value ||\n                            value.resources === void 0) {\n                            continue;\n                        }\n                        if (!addAPIProvider$1(key, value)) {\n                            console.error(err);\n                        }\n                    }\n                    catch (e) {\n                        console.error(err);\n                    }\n                }\n            }\n        }\n    }\n    const _api = {\n        getAPIConfig,\n        setAPIModule,\n        sendAPIQuery,\n        setFetch,\n        getFetch,\n        listAPIProviders,\n    };\n    return {\n        enableCache: (storage) => toggleBrowserCache(storage, true),\n        disableCache: (storage) => toggleBrowserCache(storage, false),\n        iconLoaded: iconLoaded$1,\n        iconExists: iconLoaded$1, // deprecated, kept to avoid breaking changes\n        getIcon: getIcon$1,\n        listIcons: listIcons$1,\n        addIcon: addIcon$1,\n        addCollection: addCollection$1,\n        calculateSize: calculateSize$1,\n        buildIcon: iconToSVG,\n        iconToHTML: iconToHTML$1,\n        svgToURL: svgToURL$1,\n        loadIcons: loadIcons$1,\n        loadIcon: loadIcon$1,\n        addAPIProvider: addAPIProvider$1,\n        appendCustomStyle,\n        _api,\n    };\n}\n\n// List of properties to apply\nconst monotoneProps = {\n    \'background-color\': \'currentColor\',\n};\nconst coloredProps = {\n    \'background-color\': \'transparent\',\n};\n// Dynamically add common props to variables above\nconst propsToAdd = {\n    image: \'var(--svg)\',\n    repeat: \'no-repeat\',\n    size: \'100% 100%\',\n};\nconst propsToAddTo = {\n    \'-webkit-mask\': monotoneProps,\n    \'mask\': monotoneProps,\n    \'background\': coloredProps,\n};\nfor (const prefix in propsToAddTo) {\n    const list = propsToAddTo[prefix];\n    for (const prop in propsToAdd) {\n        list[prefix + \'-\' + prop] = propsToAdd[prop];\n    }\n}\n/**\n * Fix size: add \'px\' to numbers\n */\nfunction fixSize(value) {\n    return value ? value + (value.match(/^[-0-9.]+$/) ? \'px\' : \'\') : \'inherit\';\n}\n/**\n * Render node as <span>\n */\nfunction renderSPAN(data, icon, useMask) {\n    const node = document.createElement(\'span\');\n    // Body\n    let body = data.body;\n    if (body.indexOf(\'<a\') !== -1) {\n        // Animated SVG: add something to fix timing bug\n        body += \'\x3c!-- \' + Date.now() + \' --\x3e\';\n    }\n    // Generate SVG as URL\n    const renderAttribs = data.attributes;\n    const html = iconToHTML$1(body, {\n        ...renderAttribs,\n        width: icon.width + \'\',\n        height: icon.height + \'\',\n    });\n    const url = svgToURL$1(html);\n    // Generate style\n    const svgStyle = node.style;\n    const styles = {\n        \'--svg\': url,\n        \'width\': fixSize(renderAttribs.width),\n        \'height\': fixSize(renderAttribs.height),\n        ...(useMask ? monotoneProps : coloredProps),\n    };\n    // Apply style\n    for (const prop in styles) {\n        svgStyle.setProperty(prop, styles[prop]);\n    }\n    return node;\n}\n\nlet policy;\nfunction createPolicy() {\n  try {\n    policy = window.trustedTypes.createPolicy("iconify", {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      createHTML: (s) => s\n    });\n  } catch (err) {\n    policy = null;\n  }\n}\nfunction cleanUpInnerHTML(html) {\n  if (policy === void 0) {\n    createPolicy();\n  }\n  return policy ? policy.createHTML(html) : html;\n}\n\n/**\n * Render node as <svg>\n */\nfunction renderSVG(data) {\n    const node = document.createElement(\'span\');\n    // Add style if needed\n    const attr = data.attributes;\n    let style = \'\';\n    if (!attr.width) {\n        style = \'width: inherit;\';\n    }\n    if (!attr.height) {\n        style += \'height: inherit;\';\n    }\n    if (style) {\n        attr.style = style;\n    }\n    // Generate SVG\n    const html = iconToHTML$1(data.body, attr);\n    node.innerHTML = cleanUpInnerHTML(html);\n    return node.firstChild;\n}\n\n/**\n * Find icon node\n */\nfunction findIconElement(parent) {\n    return Array.from(parent.childNodes).find((node) => {\n        const tag = node.tagName &&\n            node.tagName.toUpperCase();\n        return tag === \'SPAN\' || tag === \'SVG\';\n    });\n}\n/**\n * Render icon\n */\nfunction renderIcon(parent, state) {\n    const iconData = state.icon.data;\n    const customisations = state.customisations;\n    // Render icon\n    const renderData = iconToSVG(iconData, customisations);\n    if (customisations.preserveAspectRatio) {\n        renderData.attributes[\'preserveAspectRatio\'] =\n            customisations.preserveAspectRatio;\n    }\n    const mode = state.renderedMode;\n    let node;\n    switch (mode) {\n        case \'svg\':\n            node = renderSVG(renderData);\n            break;\n        default:\n            node = renderSPAN(renderData, {\n                ...defaultIconProps,\n                ...iconData,\n            }, mode === \'mask\');\n    }\n    // Set element\n    const oldNode = findIconElement(parent);\n    if (oldNode) {\n        // Replace old element\n        if (node.tagName === \'SPAN\' && oldNode.tagName === node.tagName) {\n            // Swap style instead of whole node\n            oldNode.setAttribute(\'style\', node.getAttribute(\'style\'));\n        }\n        else {\n            parent.replaceChild(node, oldNode);\n        }\n    }\n    else {\n        // Add new element\n        parent.appendChild(node);\n    }\n}\n\n/**\n * Set state to PendingState\n */\nfunction setPendingState(icon, inline, lastState) {\n    const lastRender = lastState &&\n        (lastState.rendered\n            ? lastState\n            : lastState.lastRender);\n    return {\n        rendered: false,\n        inline,\n        icon,\n        lastRender,\n    };\n}\n\n/**\n * Register \'iconify-icon\' component, if it does not exist\n */\nfunction defineIconifyIcon(name = \'iconify-icon\') {\n    // Check for custom elements registry and HTMLElement\n    let customElements;\n    let ParentClass;\n    try {\n        customElements = window.customElements;\n        ParentClass = window.HTMLElement;\n    }\n    catch (err) {\n        return;\n    }\n    // Make sure registry and HTMLElement exist\n    if (!customElements || !ParentClass) {\n        return;\n    }\n    // Check for duplicate\n    const ConflictingClass = customElements.get(name);\n    if (ConflictingClass) {\n        return ConflictingClass;\n    }\n    // All attributes\n    const attributes = [\n        // Icon\n        \'icon\',\n        // Mode\n        \'mode\',\n        \'inline\',\n        \'noobserver\',\n        // Customisations\n        \'width\',\n        \'height\',\n        \'rotate\',\n        \'flip\',\n    ];\n    /**\n     * Component class\n     */\n    const IconifyIcon = class extends ParentClass {\n        // Root\n        _shadowRoot;\n        // Initialised\n        _initialised = false;\n        // Icon state\n        _state;\n        // Attributes check queued\n        _checkQueued = false;\n        // Connected\n        _connected = false;\n        // Observer\n        _observer = null;\n        _visible = true;\n        /**\n         * Constructor\n         */\n        constructor() {\n            super();\n            // Attach shadow DOM\n            const root = (this._shadowRoot = this.attachShadow({\n                mode: \'open\',\n            }));\n            // Add style\n            const inline = this.hasAttribute(\'inline\');\n            updateStyle(root, inline);\n            // Create empty state\n            this._state = setPendingState({\n                value: \'\',\n            }, inline);\n            // Queue icon render\n            this._queueCheck();\n        }\n        /**\n         * Connected to DOM\n         */\n        connectedCallback() {\n            this._connected = true;\n            this.startObserver();\n        }\n        /**\n         * Disconnected from DOM\n         */\n        disconnectedCallback() {\n            this._connected = false;\n            this.stopObserver();\n        }\n        /**\n         * Observed attributes\n         */\n        static get observedAttributes() {\n            return attributes.slice(0);\n        }\n        /**\n         * Observed properties that are different from attributes\n         *\n         * Experimental! Need to test with various frameworks that support it\n         */\n        /*\n        static get properties() {\n            return {\n                inline: {\n                    type: Boolean,\n                    reflect: true,\n                },\n                // Not listing other attributes because they are strings or combination\n                // of string and another type. Cannot have multiple types\n            };\n        }\n        */\n        /**\n         * Attribute has changed\n         */\n        attributeChangedCallback(name) {\n            switch (name) {\n                case \'inline\': {\n                    // Update immediately: not affected by other attributes\n                    const newInline = this.hasAttribute(\'inline\');\n                    const state = this._state;\n                    if (newInline !== state.inline) {\n                        // Update style if inline mode changed\n                        state.inline = newInline;\n                        updateStyle(this._shadowRoot, newInline);\n                    }\n                    break;\n                }\n                case \'noobserver\': {\n                    const value = this.hasAttribute(\'noobserver\');\n                    if (value) {\n                        this.startObserver();\n                    }\n                    else {\n                        this.stopObserver();\n                    }\n                    break;\n                }\n                default:\n                    // Queue check for other attributes\n                    this._queueCheck();\n            }\n        }\n        /**\n         * Get/set icon\n         */\n        get icon() {\n            const value = this.getAttribute(\'icon\');\n            if (value && value.slice(0, 1) === \'{\') {\n                try {\n                    return JSON.parse(value);\n                }\n                catch (err) {\n                    //\n                }\n            }\n            return value;\n        }\n        set icon(value) {\n            if (typeof value === \'object\') {\n                value = JSON.stringify(value);\n            }\n            this.setAttribute(\'icon\', value);\n        }\n        /**\n         * Get/set inline\n         */\n        get inline() {\n            return this.hasAttribute(\'inline\');\n        }\n        set inline(value) {\n            if (value) {\n                this.setAttribute(\'inline\', \'true\');\n            }\n            else {\n                this.removeAttribute(\'inline\');\n            }\n        }\n        /**\n         * Get/set observer\n         */\n        get observer() {\n            return this.hasAttribute(\'observer\');\n        }\n        set observer(value) {\n            if (value) {\n                this.setAttribute(\'observer\', \'true\');\n            }\n            else {\n                this.removeAttribute(\'observer\');\n            }\n        }\n        /**\n         * Restart animation\n         */\n        restartAnimation() {\n            const state = this._state;\n            if (state.rendered) {\n                const root = this._shadowRoot;\n                if (state.renderedMode === \'svg\') {\n                    // Update root node\n                    try {\n                        root.lastChild.setCurrentTime(0);\n                        return;\n                    }\n                    catch (err) {\n                        // Failed: setCurrentTime() is not supported\n                    }\n                }\n                renderIcon(root, state);\n            }\n        }\n        /**\n         * Get status\n         */\n        get status() {\n            const state = this._state;\n            return state.rendered\n                ? \'rendered\'\n                : state.icon.data === null\n                    ? \'failed\'\n                    : \'loading\';\n        }\n        /**\n         * Queue attributes re-check\n         */\n        _queueCheck() {\n            if (!this._checkQueued) {\n                this._checkQueued = true;\n                setTimeout(() => {\n                    this._check();\n                });\n            }\n        }\n        /**\n         * Check for changes\n         */\n        _check() {\n            if (!this._checkQueued) {\n                return;\n            }\n            this._checkQueued = false;\n            const state = this._state;\n            // Get icon\n            const newIcon = this.getAttribute(\'icon\');\n            if (newIcon !== state.icon.value) {\n                this._iconChanged(newIcon);\n                return;\n            }\n            // Ignore other attributes if icon is not rendered\n            if (!state.rendered || !this._visible) {\n                return;\n            }\n            // Check for mode and attribute changes\n            const mode = this.getAttribute(\'mode\');\n            const customisations = getCustomisations(this);\n            if (state.attrMode !== mode ||\n                haveCustomisationsChanged(state.customisations, customisations) ||\n                !findIconElement(this._shadowRoot)) {\n                this._renderIcon(state.icon, customisations, mode);\n            }\n        }\n        /**\n         * Icon value has changed\n         */\n        _iconChanged(newValue) {\n            const icon = parseIconValue(newValue, (value, name, data) => {\n                // Asynchronous callback: re-check values to make sure stuff wasn\'t changed\n                const state = this._state;\n                if (state.rendered || this.getAttribute(\'icon\') !== value) {\n                    // Icon data is already available or icon attribute was changed\n                    return;\n                }\n                // Change icon\n                const icon = {\n                    value,\n                    name,\n                    data,\n                };\n                if (icon.data) {\n                    // Render icon\n                    this._gotIconData(icon);\n                }\n                else {\n                    // Nothing to render: update icon in state\n                    state.icon = icon;\n                }\n            });\n            if (icon.data) {\n                // Icon is ready to render\n                this._gotIconData(icon);\n            }\n            else {\n                // Pending icon\n                this._state = setPendingState(icon, this._state.inline, this._state);\n            }\n        }\n        /**\n         * Force render icon on state change\n         */\n        _forceRender() {\n            if (!this._visible) {\n                // Remove icon\n                const node = findIconElement(this._shadowRoot);\n                if (node) {\n                    this._shadowRoot.removeChild(node);\n                }\n                return;\n            }\n            // Re-render icon\n            this._queueCheck();\n        }\n        /**\n         * Got new icon data, icon is ready to (re)render\n         */\n        _gotIconData(icon) {\n            this._checkQueued = false;\n            this._renderIcon(icon, getCustomisations(this), this.getAttribute(\'mode\'));\n        }\n        /**\n         * Re-render based on icon data\n         */\n        _renderIcon(icon, customisations, attrMode) {\n            // Get mode\n            const renderedMode = getRenderMode(icon.data.body, attrMode);\n            // Inline was not changed\n            const inline = this._state.inline;\n            // Set state and render\n            renderIcon(this._shadowRoot, (this._state = {\n                rendered: true,\n                icon,\n                inline,\n                customisations,\n                attrMode,\n                renderedMode,\n            }));\n        }\n        /**\n         * Start observer\n         */\n        startObserver() {\n            if (!this._observer && !this.hasAttribute(\'noobserver\')) {\n                try {\n                    this._observer = new IntersectionObserver((entries) => {\n                        const intersecting = entries.some((entry) => entry.isIntersecting);\n                        if (intersecting !== this._visible) {\n                            this._visible = intersecting;\n                            this._forceRender();\n                        }\n                    });\n                    this._observer.observe(this);\n                }\n                catch (err) {\n                    // Something went wrong, possibly observer is not supported\n                    if (this._observer) {\n                        try {\n                            this._observer.disconnect();\n                        }\n                        catch (err) {\n                            //\n                        }\n                        this._observer = null;\n                    }\n                }\n            }\n        }\n        /**\n         * Stop observer\n         */\n        stopObserver() {\n            if (this._observer) {\n                this._observer.disconnect();\n                this._observer = null;\n                this._visible = true;\n                if (this._connected) {\n                    // Render icon\n                    this._forceRender();\n                }\n            }\n        }\n    };\n    // Add getters and setters\n    attributes.forEach((attr) => {\n        if (!(attr in IconifyIcon.prototype)) {\n            Object.defineProperty(IconifyIcon.prototype, attr, {\n                get: function () {\n                    return this.getAttribute(attr);\n                },\n                set: function (value) {\n                    if (value !== null) {\n                        this.setAttribute(attr, value);\n                    }\n                    else {\n                        this.removeAttribute(attr);\n                    }\n                },\n            });\n        }\n    });\n    // Add exported functions: both as static and instance methods\n    const functions = exportFunctions();\n    for (const key in functions) {\n        IconifyIcon[key] = IconifyIcon.prototype[key] = functions[key];\n    }\n    // Define new component\n    customElements.define(name, IconifyIcon);\n    return IconifyIcon;\n}\n\n/**\n * Create exported data: either component instance or functions\n */\nconst IconifyIconComponent = defineIconifyIcon() || exportFunctions();\n/**\n * Export functions\n */\nconst { enableCache, disableCache, iconLoaded, iconExists, // deprecated, kept to avoid breaking changes\ngetIcon, listIcons, addIcon, addCollection, calculateSize, buildIcon, iconToHTML, svgToURL, loadIcons, loadIcon, addAPIProvider, _api, } = IconifyIconComponent;\n\n\n\n;// ./src/todo.js\n/**\n * Priority enum\n * @readonly\n * @enum {{name: string, value: number}}\n */\nconst Priority = Object.freeze({\n    ONE:   { name: "one" , value: 1},\n    TWO:  { name: "two", value: 2},\n    THREE: { name: "three", value: 3}\n});\n\nconst priorityMap = new Map(\n    Object.values(Priority).map(p => [p.value, p])\n);\n\nclass ToDo {\n\n    #completed;\n    #title;\n    #dueDate;\n\n    /** @type { Priority } */\n    #priority;\n\n    //optional\n    #notes;\n    #checklist;\n\n    constructor(title, dueDate, priority, notes = null, checklist = null) {\n        this.#completed = false;\n        this.#title = title;\n        this.#dueDate = dueDate;\n        if (typeof priority === \'number\') {\n            const matchedPriority = priorityMap.get(priority);\n            console.log(matchedPriority, priorityMap);\n            if (matchedPriority) {\n                this.#priority = matchedPriority;\n            } else {\n                throw new RangeError("Priority doesn\'t exist");\n            }\n        } else {\n            throw new TypeError("Wrong type for priority");\n        }\n        this.#notes = notes;\n        this.#checklist = checklist;\n    }\n\n    #constructFromJSON(title, dueDate, priority, notes = null, checklist = null) {\n        this.#completed = false;\n        this.#title = title;\n        this.#dueDate = dueDate;\n        if (typeof priority === \'number\') {\n            const matchedPriority = priorityMap.get(priority);\n            console.log(matchedPriority, priorityMap);\n            if (matchedPriority) {\n                this.#priority = matchedPriority;\n            } else {\n                throw new RangeError("Priority doesn\'t exist");\n            }\n        } else {\n            throw new TypeError("Wrong type for priority");\n        }\n        this.#notes = notes;\n        this.#checklist = checklist;\n    }\n\n    isCompleted() {\n        return this.#completed;\n    }\n\n    setCompleted(bool) {\n        this.#completed = bool;\n    }\n\n    setPriority(priority) {\n        if (typeof priority === \'number\') {\n            const matchedPriority = priorityMap.get(priority);\n            if (matchedPriority) {\n                this.#priority = matchedPriority;\n            } else {\n                throw new RangeError("Priority doesn\'t exist");\n            }\n        } else {\n            throw new TypeError("Wrong type for priority");\n        }\n    }\n\n    getPriorityString() {\n        return this.#priority.name;\n    }\n\n    getPriorityValue() {\n        return this.#priority.value;\n    }\n\n    getTitle() {\n        return this.#title;\n    }\n\n    serializeJSON() {\n        const publicObj = { \n            title: this.#title,\n            dueDate: this.#dueDate,\n            priority: this.#priority,\n            notes: this.#notes,\n            checklist: this.#checklist \n        };\n        return JSON.stringify(publicObj);\n    }\n\n    static deserializeJSON(jsonStr) {\n        const {title, dueDate, priority, notes, checklist} = JSON.parse(jsonStr, (key, val) => {\n            if (key === \'dueDate\') {\n                return new Date(val);\n            }\n            return val;\n        });\n        \n        const privateObj = new ToDo(\'blank\', \'blank\', 1);\n        privateObj.#constructFromJSON(title, dueDate, priority.value, notes, checklist);\n        return privateObj;\n    }\n}\n\nconsole.log("Todo loaded");\n\n  \n\n\n;// ./src/utility.js\nfunction randomID16() {\n    \n    // pretty much guarantees uniqueness\n    const today = new Date();\n\n    const part1 = (today.getTime())\n    .toString(36)\n    .substring(0, 8)\n    .padStart(8, 0);\n\n    // randomness\n    // due to double point precision\n    // use two numbers\n    const FILLER_NUMBERS = \'0123456789abcdefghijklmnopqrstuvwxyz\';\n    const CHOSEN_FILLER = FILLER_NUMBERS[Math.floor(Math.random() * FILLER_NUMBERS.length)];\n\n    const part2 = (Math.random())\n        .toString(36)\n        .substring(2, 8)\n        .padStart(8, CHOSEN_FILLER);\n\n    return (part1 + part2) \n        .match(/.{4}/g)\n        .join(\'-\');\n\n}\n\n\n;// ./src/storage.js\nclass Storage {\n    \n    \n    static #isAvailable;\n    static #storageObject;\n    static {\n        let storage;\n        try {\n            storage = window["localStorage"];\n            const x = \'__DataStorageTestData__\';\n            storage.setItem(x, x);\n            storage.removeItem(x);\n            this.#isAvailable = true;\n            this.#storageObject = storage;        \n        } catch (e) {\n            this.#isAvailable = (\n                e instanceof DOMException &&\n                e.name === "QuotaExceededError" &&\n                // acknowledge QuotaExceededError only if there\'s something already stored\n                storage &&\n                storage.length !== 0\n              );\n        }\n    }\n\n    static setStorage(key, value) {\n        if (this.#isAvailable) {\n            this.#storageObject.setItem(key, value);\n        }\n    }\n\n    static getStorage(key) {\n        if (this.#isAvailable) {\n            return this.#storageObject.getItem(key);\n        }\n    }\n    \n    static removeStorage(key) {\n        if (this.#isAvailable) {\n            this.#storageObject.removeItem(key);\n        }\n    }\n    \n    static clearStorage() {\n        if (this.#isAvailable) {\n            this.#storageObject.clear();\n        }\n    }\n\n}\n\n\n;// ./src/project.js\n\n\n\n\n\n\nclass Project {\n\n    static #blankProject = new Project(\'gray\', \'Blank\', true);\n    \n    /** @type { Project } */\n    static #activeProject = this.#blankProject;\n\n    /** @type { Project[] } */\n    static #projects = new Array();\n\n    color = \'red\';\n    name = \'Project1\';\n    #isBlankDefault;\n    #ID;\n    \n    /**@type { ToDo[] }*/\n    #toDoList = new Array();\n\n    constructor(color, name, isBlankDefault = false) {\n        this.color = color;\n        this.name = name;\n        this.#isBlankDefault = isBlankDefault; \n\n        this.#ID = randomID16();\n    }\n\n    #constructFromJSON(color, name, ID, toDoList) {\n        this.color = color;\n        this.name = name;\n        this.#ID = ID;\n        this.#toDoList = toDoList;\n\n        // the blank project is NEVER serialized\n        this.#isBlankDefault = false; \n    }\n\n    getTodos() {\n        return Array.from(this.#toDoList);\n    }\n\n    removeTodo(index) {\n        return this.#toDoList.splice(index, 1);\n    }\n\n    pushTodo(...todo) {\n        this.#toDoList.push(...todo);\n    }\n\n    emplaceTodo(index, ...todos) {\n        this.#toDoList.splice(index, 0, ...todos);\n    }\n\n    replaceTodo(index, todo) {\n        return this.#toDoList.splice(index, 1, todo);\n    }\n\n    removeAllTodos() {\n        return this.#toDoList.splice(0, this.#toDoList.length);\n    }\n\n    swapTodos(index1, index2) {\n        const aux = this.#toDoList.at(index1);\n        this.#toDoList[index1] = this.#toDoList[index2];\n        this.#toDoList[index2] = aux;\n    }       \n\n    // setting ID is counterintuitive\n    getID() {\n        return this.#ID;\n    }\n\n    /**\n     * @typedef {Object} publicProject\n     * @property {string} color;\n     * @property {string} name;\n     * @property {string} id;\n     * @property {Todo[]} toDoList;\n     */\n    serializeJSON() {\n        const publicObj = { \n            color: this.color,\n            name: this.name,\n            ID: this.#ID,\n            toDoList: Array.from(this.#toDoList)\n        };\n\n        publicObj.toDoList.forEach( (toDo, index, array) => {\n            array[index] = toDo.serializeJSON();\n        });\n\n        return JSON.stringify(publicObj);\n    \n    }\n\n    static deserializeJSON(jsonStr) {\n        \n        /** @type {publicProject} */\n        const {color, name, ID, toDoList} = JSON.parse(jsonStr);\n        obj.toDoList.forEach((val, index, array) => {\n            array[index] = ToDo.deserializeJSON(val);\n        });\n\n        return obj;\n    }\n\n    static isActiveBlank() {\n        return this.#activeProject.#isBlankDefault;\n    }\n\n    /**\n     * @param {Project} project \n     */\n    static setActiveProject(project) {\n\n\n\n        Storage.setStorage(project.#ID, )\n        this.#activeProject = project;\n    }\n\n    /**\n     * Returns the active project in view.\n     *\n     * @static\n     * @returns {Project}\n     */\n    static getActiveProject() {\n        return this.#activeProject;\n    }\n\n    static appendToProjects(...projects) {\n        this.#projects.push(...projects);\n    }\n\n    static getProjects() {\n        return Array.from(this.#projects);\n    }\n}\n\n\n\n\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/dialog.css\nvar dialog = __webpack_require__(71);\n;// ./src/dialog.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar dialog_options = {};\n\ndialog_options.styleTagTransform = (styleTagTransform_default());\ndialog_options.setAttributes = (setAttributesWithoutAttributes_default());\ndialog_options.insert = insertBySelector_default().bind(null, "head");\ndialog_options.domAPI = (styleDomAPI_default());\ndialog_options.insertStyleElement = (insertStyleElement_default());\n\nvar dialog_update = injectStylesIntoStyleTag_default()(dialog/* default */.A, dialog_options);\n\n\n\n\n       /* harmony default export */ const src_dialog = (dialog/* default */.A && dialog/* default */.A.locals ? dialog/* default */.A.locals : undefined);\n\n;// ./src/DOM.js\n\n\n\n\nclass DialogWindow {\n    static #dialog = document.querySelector("#info-box");\n    static #dialogBody = this.#dialog.querySelector("#info-body");\n    \n    static assignEvents() {\n        window.addEventListener(\'click\', e => {\n            if (!e.target.matches(\'#info-body, .dialog-button\')) {\n                if (this.#dialog.open) {\n                this.close();\n                }\n            }\n        }); \n    }\n\n    static resetContent() {\n        this.#dialogBody.replaceChildren();\n    }\n\n    static appendElement(elementType, classes, textContent, ID = null, parent = "#info-body") {\n        const element = document.createElement(elementType);\n        element.classList.add(...classes);\n        element.textContent = textContent;\n        if (typeof ID === "string")\n            element.ID = ID;\n        document.querySelector(parent).appendChild(element);\n    }\n\n    static open() {\n        this.#dialog.show();\n    }\n\n    static close() {\n        this.#dialog.close();\n    }\n};\n\nclass DOMEditor {\n\n\n    static sidebar = document.querySelector("#sidebar");\n    static main = document.querySelector("main");\n\n    static mainBlank = document.querySelector("#blank-content"); \n    \n    static closeBtn = document.querySelector("#sidebar .toggle-btn");\n    static projectBtn = document.querySelector("#project-selector");\n    static projectDropdown = document.querySelector("#project-dropdown");\n    \n    \n    static createProjBtn = document.querySelector("#create-proj");\n    static deleteProjBtn = document.querySelector("#delete-proj");\n    static renameProjBtn = document.querySelector("#rename-proj");\n    static recolorProjBtn = document.querySelector("#recolor-proj");\n    static notesProjBtn = document.querySelector("#notes-proj");\n    static datesProjBtn = document.querySelector("#dates-proj");\n\n\n\n\n    // "static constructor"\n    static {\n\n        DialogWindow.assignEvents();\n\n        this.closeBtn.addEventListener("click", e => {\n            sidebar.classList.toggle("close");\n        });\n        \n        this.projectBtn.addEventListener("click", e => {\n            console.log("Click");\n            this.projectDropdown.classList.toggle("show");\n        });\n        \n        window.addEventListener(\'click\', e => {\n            if (!e.target.matches(\'#project-selector\')) {\n              let dropdowns = document.querySelectorAll(".dropdown-content");\n              for (let i = 0; i < dropdowns.length; i++) {\n                let openDropdown = dropdowns[i];\n                if (openDropdown.classList.contains(\'show\')) {\n                  openDropdown.classList.remove(\'show\');\n                }\n              }\n            }\n          }); \n        \n\n\n        \n        const COLORS = [\'rgb(214, 44, 75)\', \'rgb(148, 173, 215)\', \'rgb(155, 236, 0)\', \'rgb(249, 76, 16)\', \'rgb(248, 222, 34)\', \'rgb(210, 100, 154)\'];\n        let counter = 1;\n        this.createProjBtn.addEventListener(\'click\', e => {\n            \n            const idx = Math.floor(Math.random() * COLORS.length);  \n            const project = new Project(COLORS[idx], `Project${counter}`, false);\n            counter++;\n    \n            project.pushTodo(\n                new ToDo(\'Super Extra Long Todo Name That Gets Clipped\', new Date(), 1), \n                new ToDo(\'Do that\', new Date(), 2), \n                new ToDo(\'and that\', new Date(), 3)\n            );    \n\n            Project.setActiveProject(project);\n            Project.appendToProjects(project);\n\n            console.log(project);\n            this.updateProjectList();\n        });\n\n        this.deleteProjBtn.addEventListener(\'click\', e => {\n            DialogWindow.resetContent();\n            DialogWindow.appendElement("h3", ["heading"], "Delete a project...");\n            DialogWindow.open();\n        });\n        \n        this.renameProjBtn.addEventListener(\'click\', e => {\n            DialogWindow.resetContent();\n            DialogWindow.appendElement("h3", ["heading"], "Rename this project...");\n            DialogWindow.open();\n        });\n        \n        this.recolorProjBtn.addEventListener(\'click\', e => {\n            DialogWindow.open();\n        });\n        \n        this.notesProjBtn.addEventListener(\'click\', e => {\n            DialogWindow.open();\n        });\n        \n        this.datesProjBtn.addEventListener(\'click\', e => {\n            DialogWindow.open();\n        });\n\n        console.log("Events assigned");\n\n\n    }\n\n    static updateActiveProject() {\n        this.main.replaceChildren();\n        const activeProject = Project.getActiveProject();\n        const icon = document.querySelector("#project-icon");\n        let projectName = activeProject.name;\n        if (projectName.length > 12) {\n            projectName = projectName.slice(0, 9) + \'...\';\n        }\n        document.querySelector("#project-name").textContent = activeProject.name;\n        icon.textContent = activeProject.name.toUpperCase().at(-1);\n        icon.setAttribute(\'style\', `background: linear-gradient(135deg, ${activeProject.color} 0%, hsl(from ${activeProject.color} h s calc(l - 10)) 100%);`);\n        this.updateMainContent();\n    }\n\n    static updateProjectList() {\n        this.projectDropdown.replaceChildren();\n        const projects = Project.getProjects();\n\n        projects.sort((a, b) => a.getID() > b.getID() ? 1 : -1 );\n        for (let project of projects) {\n            const projectListing = document.createElement(\'div\');\n            projectListing.textContent = project.name;\n\n            projectListing.addEventListener(\'click\', e => {\n                Project.setActiveProject(project);\n                this.updateActiveProject();\n            });\n\n            this.projectDropdown.appendChild(projectListing);\n\n        }\n    }\n\n    static updateMainContent() {\n        if (!Project.isActiveBlank()) {\n            if (this.main.classList.contains("empty")) {\n                this.main.classList.remove("empty");\n                \n            }\n        } else {\n            if (!this.main.classList.contains("empty")) {\n                this.main.classList.add("empty");\n                return;\n            }\n        }\n        \n        const activeProject = Project.getActiveProject();\n        const toDoList = activeProject.getTodos();\n        const listElem = document.createElement(\'ul\');\n\n        \n        const gradientTop = document.createElement(\'div\');\n        const gradientBottom = document.createElement(\'div\');\n        gradientTop.classList.add("gradient", "top");\n        gradientBottom.classList.add("gradient", "bottom");\n        \n\n        this.main.append(gradientTop, gradientBottom);\n        listElem.classList.add("flex");\n\n        toDoList.forEach( (toDo, index) => {\n            const li = document.createElement(\'li\');\n\n            const iconCheck = document.createElement("iconify-icon");\n            const iconMore = document.createElement("iconify-icon");\n            iconMore.classList.add(\'more\');\n\n            const moreContent = document.createElement("div"); \n            moreContent.classList.add("more-content");\n\n            // Inner buttons scope\n            {\n                \n                /**\n                 * @type {{name: string, icon: string, alt: string}[]}\n                 */\n                const BUTTONS = [\n                    {name: \'move-up\', icon: \'material-symbols:arrow-upward-alt-rounded\', alt: \'Move to-do up...\'},\n                    {name: \'move-down\', icon: \'material-symbols:arrow-downward-alt-rounded\', alt: \'Move to-do down...\'},\n                    {name: \'delete\', icon: \'material-symbols:delete-outline-rounded\', alt: \'Remove to-do...\'},\n                    {name: \'cycle-priority\', icon: \'material-symbols:stack-star\', alt: \'Cycle priority...\'},\n                ];\n\n                // callback function:\n                // design: change data, then DOM\n                const callback = function(name) {\n                    let parent, idx, max;\n                    \n                    parent = li.parentNode;\n                    max = [...parent.children].length - 1;\n                    idx = [...parent.children].indexOf(li);\n\n                    switch (name) {\n                        case \'move-up\':\n\n                            if (idx <= 0) return;\n                            const above = [...parent.children][idx - 1];\n                            \n                            activeProject.swapTodos(idx, idx - 1);\n                            Project.setActiveProject(activeProject);\n                            \n                            li.after(above);\n                            break;\n\n                        case \'move-down\':\n\n                            if (idx >= max) return;\n                            const below = [...parent.children][idx + 1];\n                            \n                            activeProject.swapTodos(idx, idx + 1);\n                            Project.setActiveProject(activeProject);\n                            \n                            li.before(below);\n                            break;\n\n                        case \'delete\':\n\n                            activeProject.removeTodo(idx);\n                            Project.setActiveProject(activeProject);\n                            \n                            li.remove();\n                            break;\n\n                        case \'cycle-priority\':\n                            \n                            const newPriority = (toDo.getPriorityValue()) % 3 + 1;\n                            toDo.setPriority(newPriority);\n                            activeProject.replaceTodo(index, toDo);\n                            \n                            li.classList.remove(...li.classList);\n                            li.classList.add(\'flex\', toDo.getPriorityString());\n\n                            break;\n                        \n                        default:\n                    }\n                }\n\n                for (let button of BUTTONS) {\n                    const {name, icon, alt} = button;\n                    const elem = document.createElement(\'iconify-icon\');\n                    elem.setAttribute(\'icon\', icon);\n                    elem.setAttribute(\'title\', alt);\n\n                    elem.addEventListener(\'click\', e => {\n                        callback(name);\n                    });\n                    moreContent.appendChild(elem);\n                }\n            }\n\n            iconMore.setAttribute("icon", \'material-symbols:more-horiz\');\n            if (toDo.isCompleted()) {\n                iconCheck.setAttribute("icon", \'material-symbols:check-circle-rounded\');\n            } else {\n                iconCheck.setAttribute("icon", \'material-symbols:circle-outline\');\n            }\n\n            const text = document.createElement(\'span\');\n            let todoName = toDo.getTitle();\n            if (todoName.length > 40) {\n                todoName = todoName.slice(0, 40 - 3) + \'...\';\n            }\n\n            text.textContent = todoName;\n            const switchHandler = e => {\n\n                if (e.target.matches(".more-content, .more-content *")) return;\n                const status = !toDo.isCompleted();\n                toDo.setCompleted(status);\n                li.classList.toggle(\'completed\');\n\n                if (status) {\n                    iconCheck.setAttribute("icon", \'material-symbols:check-circle-rounded\');\n                } else {\n                    iconCheck.setAttribute("icon", \'material-symbols:circle-outline\');\n                }\n                activeProject.removeTodo(index);\n                activeProject.emplaceTodo(index, toDo);\n            }\n\n            li.addEventListener(\'dblclick\', switchHandler);\n            iconCheck.addEventListener(\'click\', switchHandler);\n\n            li.classList.add(\'flex\', toDo.getPriorityString());\n            \n            iconMore.addEventListener(\'click\', e => {\n                const json = activeProject.serializeJSON()\n                console.log(json, Project.deserializeJSON(json));\n                moreContent.classList.toggle(\'show\');\n            });\n            \n\n            moreContent\n            li.append(iconCheck, text, iconMore, moreContent);\n            \n            listElem.appendChild(li);\n        });\n        this.main.appendChild(listElem);\n    }\n}\n\n\n\n;// ./src/index.js\n\n\n\n\n\n\n\nconsole.log("Hello, world!");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///87\n')}},__webpack_module_cache__={};function __webpack_require__(I){var g=__webpack_module_cache__[I];if(void 0!==g)return g.exports;var n=__webpack_module_cache__[I]={id:I,exports:{}};return __webpack_modules__[I](n,n.exports,__webpack_require__),n.exports}__webpack_require__.n=I=>{var g=I&&I.__esModule?()=>I.default:()=>I;return __webpack_require__.d(g,{a:g}),g},__webpack_require__.d=(I,g)=>{for(var n in g)__webpack_require__.o(g,n)&&!__webpack_require__.o(I,n)&&Object.defineProperty(I,n,{enumerable:!0,get:g[n]})},__webpack_require__.o=(I,g)=>Object.prototype.hasOwnProperty.call(I,g),__webpack_require__.nc=void 0;var __webpack_exports__=__webpack_require__(87)})();